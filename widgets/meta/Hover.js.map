{"version":3,"file":"Hover.js","sourceRoot":"","sources":["../../../src/widgets/meta/Hover.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAAA,8CAAyC;IACzC,oDAAmD;IAOnD;QAAA;YAAA,iBA8BC;YA7BQ,aAAQ,GAAG,IAAI,iBAAO,EAAyB,CAAC;YAEhD,kBAAa,GAAG,UAAC,KAAiB;gBACzC,oDAAoD;gBACpD,IAAM,IAAI,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,MAAqB,CAAE,CAAC;gBAC7D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACrB,IAAI,CAAC,UAAU,EAAE,CAAC;gBACnB,CAAC;YACF,CAAC,CAAA;YAEO,kBAAa,GAAG,UAAC,KAAiB;gBACzC,oDAAoD;gBACpD,IAAM,IAAI,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,MAAqB,CAAE,CAAC;gBAC7D,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACnB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;oBACtB,IAAI,CAAC,UAAU,EAAE,CAAC;gBACnB,CAAC;YACF,CAAC,CAAA;QAWF,CAAC;QATO,6BAAG,GAAV,UAAW,IAAiB,EAAE,UAAsB;YAC3C,IAAA,wBAAQ,CAAU;YAC1B,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACzB,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,YAAA,EAAE,CAAC,CAAC;gBACpD,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;gBACxD,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YACzD,CAAC;YACD,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC,QAAQ,CAAC;QACrC,CAAC;QACF,sBAAC;IAAD,CAAC,AA9BD,IA8BC;IAED,IAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAC;IAEzC;QAAmC,yBAAI;QAAvC;YAAA,qEAWC;YAVQ,sBAAgB,GAAe,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;QAUnE,CAAC;QARO,mBAAG,GAAV,UAAW,GAAoB;YAC9B,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAE/B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC,KAAK,CAAC;YACd,CAAC;YACD,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACpD,CAAC;QACF,YAAC;IAAD,CAAC,AAXD,CAAmC,WAAI,GAWtC","sourcesContent":["import WeakMap from '@dojo/shim/WeakMap';\nimport { Base } from '@dojo/widget-core/meta/Base';\n\ninterface NodeData {\n\thovering: boolean;\n\tinvalidate: () => void;\n}\n\nclass HoverController {\n\tprivate _nodeMap = new WeakMap<HTMLElement, NodeData>();\n\n\tprivate _onmouseenter = (event: MouseEvent) => {\n\t\t// cannot end up here unless we have data in the map\n\t\tconst data = this._nodeMap.get(event.target as HTMLElement)!;\n\t\tif (!data.hovering) {\n\t\t\tdata.hovering = true;\n\t\t\tdata.invalidate();\n\t\t}\n\t}\n\n\tprivate _onmouseleave = (event: MouseEvent) => {\n\t\t// cannot end up here unless we have data in the map\n\t\tconst data = this._nodeMap.get(event.target as HTMLElement)!;\n\t\tif (data.hovering) {\n\t\t\tdata.hovering = false;\n\t\t\tdata.invalidate();\n\t\t}\n\t}\n\n\tpublic get(node: HTMLElement, invalidate: () => void): boolean {\n\t\tconst { _nodeMap } = this;\n\t\tif (!_nodeMap.has(node)) {\n\t\t\t_nodeMap.set(node, { hovering: false, invalidate });\n\t\t\tnode.addEventListener('mouseenter', this._onmouseenter);\n\t\t\tnode.addEventListener('mouseleave', this._onmouseleave);\n\t\t}\n\t\treturn _nodeMap.get(node)!.hovering;\n\t}\n}\n\nconst controller = new HoverController();\n\nexport default class Hover extends Base {\n\tprivate _boundInvalidate: () => void = this.invalidate.bind(this);\n\n\tpublic get(key: string | number): boolean {\n\t\tconst node = this.getNode(key);\n\n\t\tif (!node) {\n\t\t\treturn false;\n\t\t}\n\t\treturn controller.get(node, this._boundInvalidate);\n\t}\n}\n"]}