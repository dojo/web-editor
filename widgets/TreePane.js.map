{"version":3,"file":"TreePane.js","sourceRoot":"","sources":["../../src/widgets/TreePane.ts"],"names":[],"mappings":"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","sourcesContent":["import { includes } from '@dojo/shim/array';\nimport { v, w } from '@dojo/widget-core/d';\nimport { DNode, WNode } from '@dojo/widget-core/interfaces';\nimport WidgetBase from '@dojo/widget-core/WidgetBase';\nimport Dimensions from '@dojo/widget-core/meta/Dimensions';\nimport Drag from '@dojo/widget-core/meta/Drag';\nimport { theme, ThemedMixin, ThemedProperties } from '@dojo/widget-core/mixins/Themed';\nimport { Keys } from '@dojo/widgets/common/util';\nimport ScrollBar from './ScrollBar';\nimport * as css from '../styles/treepane.m.css';\nimport * as iconCss from '../styles/icons.m.css';\n\n/**\n * The interface for items that can be rendered in the `TreePane`.\n *\n * There needs to be a single `root` item which the rest of the tree is built from.\n */\nexport interface TreePaneItem {\n\t/**\n\t * Any children that are owned by\n\t */\n\tchildren?: TreePaneItem[];\n\n\t/**\n\t * A unique id for the whole tree.\n\t */\n\tid: string;\n\n\t/**\n\t * The label for the item, if a type of `string`, it will be used with the `IconResolver` to determine the\n\t * specific icon used.\n\t */\n\tlabel: DNode;\n\n\t/**\n\t * The value displayed when the mouse hovers over an item.  Typically this would be set to the full path of\n\t * a file.\n\t */\n\ttitle: string;\n}\n\n/**\n * Properties that can be set for `TreePane`\n */\nexport interface TreePaneProperties extends ThemedProperties {\n\t/**\n\t * An array of item IDs that are currently exapanded.\n\t */\n\texpanded?: string[];\n\n\t/**\n\t * A method for returning the class to an item when rendering, the method should return a `string` with the class name that\n\t * should be used for the item or `undefined` if there is no icon\n\t * @param item The tree pane item that is referenced\n\t * @param expanded If the tree pane item has the `children` attribute, expanded will be `true` if the item is in an\n\t *                 expanded state or `false` if not expanded.  Otherwise the value is `undefined`.\n\t */\n\tgetItemClass?(item: TreePaneItem, expanded: boolean | undefined): string | undefined;\n\n\t/**\n\t * The label for the widget from an accessability perspective\n\t */\n\tlabel?: string;\n\n\t/**\n\t * The ID of the currently selected item\n\t */\n\tselected?: string;\n\n\t/**\n\t * Should the root be shown?  Defaults to `false`.\n\t */\n\tshowRoot?: boolean;\n\n\t/**\n\t * The root item of the tree\n\t */\n\troot?: TreePaneItem;\n\n\t/**\n\t * Called when an item is opened (double clicked or enter pressed)\n\t * @param id The ID of the item that is attempting to be opened\n\t */\n\tonItemOpen?(id: string): void;\n\n\t/**\n\t * Called when an item is being selected (clicked or navigated to via the keyboard)\n\t *\n\t * The controlling application should change the `selected` property if the selection is valid\n\t * to update the visual state of the widget\n\t * @param id The ID of the item that is attempting to be selected\n\t */\n\tonItemSelect?(id: string): void;\n\n\t/**\n\t * Called on a parent item when the item's expanded state is being toggled.\n\t *\n\t * The controlling application should add or remove the ID from the `expanded` array property to\n\t * update the visual state of the widget\n\t * @param id The ID of the item that is attempting to have its expanded state toggled\n\t */\n\tonItemToggle?(id: string): void;\n}\n\nconst ROW_HEIGHT = 22;\nconst ROW_LEVEL_LEFT_PADDING = 12;\n\nconst ThemedBase = ThemedMixin(WidgetBase);\n\n/**\n * Properties for the internal `Row` class.\n */\nexport interface RowProperties extends ThemedProperties {\n\t/**\n\t * A custom class which effects the display of the icon for the row\n\t */\n\tclass?: string;\n\n\t/**\n\t * If a parent row, should it be rendered in an expanded or unexpanded state?\n\t */\n\texpanded?: boolean;\n\n\t/**\n\t * Does the row have children?\n\t */\n\thasChildren?: boolean;\n\n\t/**\n\t * The label for the row, typically a `string`\n\t */\n\tlabel: DNode;\n\n\t/**\n\t * At what level in the UI should the row display itself at\n\t */\n\tlevel: number;\n\n\t/**\n\t * Is the row in a selected state or not\n\t */\n\tselected?: boolean;\n\n\t/**\n\t * The text that should be displayed when the row is hovered over\n\t */\n\ttitle?: string;\n\n\t/**\n\t * Called when the row is clicked\n\t */\n\tonClick?(key?: string | number): void;\n\n\t/**\n\t * Called when the row is double clicked\n\t */\n\tonDblClick?(key?: string | number): void;\n}\n\n/**\n * The internal widget class which renders a row in the `TreePane`\n */\n@theme(css)\nexport class Row extends ThemedBase<RowProperties> {\n\tprivate _onclick() {\n\t\tthis.properties.onClick && this.properties.onClick(this.properties.key);\n\t}\n\tprivate _ondblclick() {\n\t\tthis.properties.onDblClick && this.properties.onDblClick(this.properties.key);\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\t_onclick,\n\t\t\t_ondblclick,\n\t\t\tproperties: {\n\t\t\t\tclass: rowClass,\n\t\t\t\texpanded,\n\t\t\t\thasChildren,\n\t\t\t\tlabel,\n\t\t\t\tlevel,\n\t\t\t\tselected,\n\t\t\t\ttitle\n\t\t\t}\n\t\t} = this;\n\t\tconst classes = [\n\t\t\tcss.row,\n\t\t\tselected && css.selected || null,\n\t\t\thasChildren && css.hasChildren || null,\n\t\t\texpanded && css.expanded || null\n\t\t];\n\t\treturn v('div', {\n\t\t\t'aria-level': String(level),\n\t\t\t'aria-selected': selected,\n\t\t\tclasses: this.theme(classes),\n\t\t\trole: 'treeitem',\n\t\t\tstyles: {\n\t\t\t\t'padding-left': String(level * ROW_LEVEL_LEFT_PADDING) + 'px'\n\t\t\t},\n\n\t\t\tonclick: _onclick,\n\t\t\tondblclick: _ondblclick\n\t\t}, [\n\t\t\tv('div', {\n\t\t\t\tclasses: this.theme(css.content)\n\t\t\t}, [\n\t\t\t\tv('div', {\n\t\t\t\t\tclasses: [ this.theme(css.label), iconCss.label, rowClass || null ],\n\t\t\t\t\ttitle: title\n\t\t\t\t}, [\n\t\t\t\t\tv('a', {\n\t\t\t\t\t\tclasses: this.theme(css.labelName)\n\t\t\t\t\t}, [ label ])\n\t\t\t\t])\n\t\t\t])\n\t\t]);\n\t}\n}\n\n/**\n * An internal interface for maintaining navigation state of the `TreePane` in order to facilitate keyboard\n * navigation.\n */\ninterface TreePaneNavigationState {\n\tnext: string;\n\tprevious: string;\n\tselected: string;\n\tselectedPosition: number;\n\tstart: number;\n\tend: number;\n}\n\n/**\n * A widget class which takes a tree of items with a root specified as the `root` property and renders them into\n * a hierarchical set of rows, providing events that allow expansion/collapse of parent nodes, scrolling, and the\n * ability to _open_ nodes.\n */\n@theme(css)\nexport default class TreePane extends ThemedBase<TreePaneProperties> {\n\tprivate _navigation: TreePaneNavigationState;\n\tprivate _scrollPosition = 0;\n\tprivate _scrollVisible = false;\n\tprivate _size: number;\n\tprivate _sliderSize: number;\n\n\t/**\n\t * Search the tree of items to find one item, in a Breadth First Search fashion\n\t * @param id The tree pane item ID to match\n\t */\n\tprivate _findItem(id: string): TreePaneItem | undefined {\n\t\tif (!this.properties.root) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction find(id: string, item: TreePaneItem): TreePaneItem | undefined {\n\t\t\tif (item.id === id) {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t\tconst children = item.children;\n\t\t\tif (children) {\n\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\tconst search = find(id, children[i]);\n\t\t\t\t\tif (search) {\n\t\t\t\t\t\treturn search;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn find(id, this.properties.root);\n\t}\n\n\t/**\n\t * Determine how many rows are currently visible\n\t */\n\tprivate _getVisibleRowCount(): number {\n\t\treturn this.meta(Dimensions).get('rows').size.height / ROW_HEIGHT;\n\t}\n\n\t/**\n\t * Deal with keyboard navigation in the scroll area\n\t * @param evt The keyboard event\n\t */\n\tprivate _onkeydown(evt: KeyboardEvent) {\n\t\tconst {\n\t\t\tproperties: {\n\t\t\t\texpanded = [],\n\t\t\t\tonItemOpen,\n\t\t\t\tonItemSelect,\n\t\t\t\tonItemToggle\n\t\t\t},\n\t\t\t_navigation: { next, previous, selected, start, end, selectedPosition }\n\t\t} = this;\n\t\tswitch (evt.which) {\n\t\tcase Keys.Down: /* Select Next Row */\n\t\t\tif (next && onItemSelect) {\n\t\t\t\tevt.preventDefault();\n\t\t\t\tonItemSelect(next);\n\t\t\t\tconst visibleEnd = end - start - 4;\n\t\t\t\tif (selectedPosition > visibleEnd) { /* scroll down */\n\t\t\t\t\tthis._onPositionUpdate(Math.ceil(selectedPosition - visibleEnd));\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase Keys.Up: /* Select Previous Row */\n\t\t\tif (previous && onItemSelect) {\n\t\t\t\tevt.preventDefault();\n\t\t\t\tonItemSelect(previous);\n\t\t\t\tif (selectedPosition < 2) { /* scroll up */\n\t\t\t\t\tthis._onPositionUpdate(selectedPosition - 2);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase Keys.Left: /* Close a folder */\n\t\t\tif (selected && includes(expanded, selected) && onItemToggle) {\n\t\t\t\tevt.preventDefault();\n\t\t\t\tonItemToggle(selected);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase Keys.Right: /* Open a folder */\n\t\t\tif (selected) {\n\t\t\t\tconst item = this._findItem(selected);\n\t\t\t\tif (item && item.children && !includes(expanded, selected) && onItemToggle) {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tonItemToggle(selected);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase Keys.Enter: /* Open a folder or open an item */\n\t\t\tif (selected && onItemOpen) {\n\t\t\t\tevt.preventDefault();\n\t\t\t\tonItemOpen(selected);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Show the scrollbar\n\t * @param evt The mouse event\n\t */\n\tprivate _onmouseenter(evt: MouseEvent) {\n\t\tevt.preventDefault();\n\t\tthis._scrollVisible = true;\n\t\tthis.invalidate();\n\t}\n\n\t/**\n\t * Hide the scroll bar\n\t * @param evt The mouse event\n\t */\n\tprivate _onmouseleave(evt: MouseEvent) {\n\t\tevt.preventDefault();\n\t\tthis._scrollVisible = false;\n\t\tthis.invalidate();\n\t}\n\n\t/**\n\t * An internal higher order event that occurs when the top position of tree pane has changed, usually in response to a\n\t * scroll event.  The change is expressed in the number of rows moved, positive or negative.\n\t * @param delta The number of rows that have been scrolled\n\t * @returns `true` if the position was updated, otherwise `false`, which allows other methods to allow the tiggering\n\t *          event to bubble.\n\t */\n\tprivate _onPositionUpdate(delta: number, invalidateOnChange = true): boolean {\n\t\tconst { _scrollPosition, _size, _sliderSize } = this;\n\t\tconst updatedPosition = _scrollPosition + delta;\n\t\tconst maxPosition = _size - _sliderSize + 1;\n\t\tthis._scrollPosition = updatedPosition > 0 ? updatedPosition > maxPosition ? maxPosition : updatedPosition : 0;\n\t\tif (_scrollPosition !== this._scrollPosition) {\n\t\t\tif (invalidateOnChange) {\n\t\t\t\tthis.invalidate();\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Handler for the row's higher order `onClick` event.  This fires the `onItemSelect` event.  If the item has children\n\t * then the `onItemToggle` is fired.  It also indicates to the widget that it should attempt to focus itself.\n\t * @param key The key of the item that has been clicked\n\t */\n\tprivate _onRowClick(key: string) {\n\t\tthis.properties.selected !== key && this.properties.onItemSelect && this.properties.onItemSelect(key);\n\t\tconst item = this._findItem(key);\n\t\tif (!item) {\n\t\t\tthrow new Error(`Uncached TreePane row ID: \"${key}\"`);\n\t\t}\n\t\tif (item.children && this.properties.onItemToggle) {\n\t\t\tthis.properties.onItemToggle(key);\n\t\t}\n\t}\n\n\t/**\n\t * Handler for the row's higher order `onDblClick` event.  This fires the `onItemOpen` event.\n\t * @param key The key of the item that has been double clicked\n\t */\n\tprivate _onRowDblClick(key: string) {\n\t\tthis.properties.onItemOpen && this.properties.onItemOpen(key);\n\t}\n\n\t/**\n\t * Handler for the ScrollBar's higher order `onScroll` event.  This calls the `_onPosistionUpdate`.\n\t * @param delta The number of rows, positive or negative that have been scrolled\n\t */\n\tprivate _onScrollbarScroll = (delta: number) => {\n\t\tthis._onPositionUpdate(delta);\n\t}\n\n\t/**\n\t * Handler for the `onwheel` when there is a wheel event in the scroll area that calls the\n\t * `_onPositionUpdate`.\n\t * @param evt The WheelEvent\n\t */\n\tprivate _onwheel(evt: WheelEvent) {\n\t\tif (this._onPositionUpdate(evt.deltaY / ROW_HEIGHT)) {\n\t\t\tevt.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * Return a `WNode<Row>` that represents a `TreePaneItem`\n\t * @param item The TreePaneItem to be rendered\n\t * @param level How deep in the hierarchy is the child\n\t */\n\tprivate _renderChild(item: TreePaneItem, level: number): WNode<Row> {\n\t\tconst { children, id: key, label, title } = item;\n\t\tconst navigation = this._navigation;\n\t\tconst { expanded: propsExpanded = [], getItemClass, selected, theme } = this.properties;\n\t\tconst expanded = includes(propsExpanded, key);\n\t\tconst hasChildren = Boolean(children);\n\t\tif (!navigation.selected) {\n\t\t\tif (selected === key) {\n\t\t\t\tnavigation.selected = key;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnavigation.previous = key;\n\t\t\t\tnavigation.selectedPosition++;\n\t\t\t}\n\t\t}\n\t\telse if (!navigation.next) {\n\t\t\tnavigation.next = key;\n\t\t}\n\n\t\treturn w(Row, {\n\t\t\tclass: getItemClass && getItemClass(item, expanded),\n\t\t\texpanded,\n\t\t\thasChildren,\n\t\t\tkey,\n\t\t\tlevel,\n\t\t\tlabel,\n\t\t\tselected: selected === key,\n\t\t\ttitle,\n\t\t\ttheme,\n\n\t\t\tonClick: this._onRowClick,\n\t\t\tonDblClick: this._onRowDblClick\n\t\t});\n\t}\n\n\t/**\n\t * Flatten the `root` of the tree and determine which rows need to be rendered, return an array\n\t * of `(WNode<Row> | null)[]`.\n\t */\n\tprivate _renderChildren(visibleRowCount: number): (WNode<Row> | null)[] {\n\t\tthis._navigation = {\n\t\t\tnext: '',\n\t\t\tprevious: '',\n\t\t\tselected: '',\n\t\t\tselectedPosition: 0,\n\t\t\tstart: 0,\n\t\t\tend: 0\n\t\t};\n\t\tconst {\n\t\t\t_navigation,\n\t\t\t_scrollPosition,\n\t\t\tproperties: {\n\t\t\t\texpanded = [],\n\t\t\t\troot,\n\t\t\t\tshowRoot\n\t\t\t}\n\t\t} = this;\n\t\tconst children: (WNode<Row> | null)[] = [];\n\t\tconst start = _navigation.start = _scrollPosition ? _scrollPosition - 1 : 0;\n\t\tconst end = _navigation.end = start + visibleRowCount + 2;\n\t\tlet rowCount = 0;\n\n\t\tconst addChildren = (items: TreePaneItem[], level: number) => {\n\t\t\titems.forEach((item) => {\n\t\t\t\trowCount++;\n\t\t\t\tchildren.push(rowCount >= start && rowCount <= end ? this._renderChild(item, level) : null);\n\t\t\t\tif (item.children && item.children.length && includes(expanded, item.id)) {\n\t\t\t\t\taddChildren(item.children, level + 1);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tif (root) {\n\t\t\taddChildren(showRoot ? [ root ] : root.children || [], 1);\n\t\t}\n\n\t\treturn children;\n\t}\n\n\tpublic render() {\n\t\tconst {\n\t\t\t_onScrollbarScroll,\n\t\t\t_scrollPosition,\n\t\t\t_scrollVisible,\n\t\t\tproperties: {\n\t\t\t\tkey,\n\t\t\t\tlabel,\n\t\t\t\ttheme\n\t\t\t}\n\t\t} = this;\n\n\t\tconst delta = this.meta(Drag).get('rows').delta.y;\n\t\tif (delta) {\n\t\t\tthis._onPositionUpdate((delta - (delta * 2)) / ROW_HEIGHT, false);\n\t\t}\n\n\t\tconst top =  0 - (_scrollPosition % ROW_HEIGHT);\n\t\tconst visibleRowCount = this._getVisibleRowCount();\n\t\tconst rows = this._renderChildren(visibleRowCount);\n\t\tconst sliderSize = this._sliderSize = visibleRowCount > rows.length ? rows.length : visibleRowCount;\n\t\tconst size = this._size = rows.length;\n\n\t\treturn v('div', {\n\t\t\t'aria-hidden': false,\n\t\t\t'aria-label': label,\n\t\t\tclasses: this.theme(css.root),\n\t\t\tkey,\n\t\t\trole: 'tree',\n\n\t\t\tonmouseenter: this._onmouseenter,\n\t\t\tonmouseleave: this._onmouseleave\n\t\t}, [\n\t\t\tv('div', {\n\t\t\t\tclasses: this.theme(css.scroll),\n\t\t\t\tkey: 'rows',\n\t\t\t\trole: 'presentation',\n\t\t\t\tstyles: {\n\t\t\t\t\ttop: String(top) + 'px'\n\t\t\t\t},\n\t\t\t\ttabIndex: 0,\n\n\t\t\t\tonkeydown: this._onkeydown,\n\t\t\t\tonwheel: this._onwheel\n\t\t\t}, rows),\n\t\t\tw(ScrollBar, {\n\t\t\t\tposition: _scrollPosition,\n\t\t\t\tsize,\n\t\t\t\tsliderSize,\n\t\t\t\tvisible: _scrollVisible,\n\t\t\t\ttheme,\n\n\t\t\t\tonScroll: _onScrollbarScroll\n\t\t\t})\n\t\t]);\n\t}\n}\n"]}