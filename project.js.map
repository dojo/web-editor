{"version":3,"file":"project.js","sourceRoot":"","sources":["../src/project.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,iCAA+B,CAAC,+BAA+B;IAG/D,8CAAyC;IACzC,wCAAyC;IACzC,8CAAyC;IACzC,0CAAkD;IAClD,8CAAyC;IAEzC,qCAAsE;IACtE,uCAAwD;IAkDxD;;;;;;;OAOG;IACH,sCAAsC,WAA4C,EAAE,OAAe;QAClG,EAAE,CAAC,CAAC,OAAO,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,WAAW,CAAC;QACpB,CAAC;QACD,IAAI,CAAC,CAAC;YACL,IAAI,eAAe,GAAG,WAAW,CAAC;YAClC,IAAI,MAAM,GAAG,EAAE,CAAC;YAEhB,IAAI,MAAM,GAAG,CAAC,CAAC;YACf,OAAO,eAAe,EAAE,CAAC;gBACxB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACZ,MAAM,IAAI,OAAO,CAAC;oBAElB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBACjC,MAAM,IAAI,IAAI,CAAC;oBAChB,CAAC;gBACF,CAAC;gBACD,MAAM,IAAI,eAAe,CAAC,WAAW,CAAC;gBACtC,MAAM,EAAE,CAAC;gBACT,eAAe,GAAG,eAAe,CAAC,IAAK,CAAC;YACzC,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QACf,CAAC;IACF,CAAC;IAED;;;OAGG;IACH,2BAA2B,EAA2C;YAAzC,kBAAc,EAAE,cAAI,EAAE,cAAI;QACtD,IAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,mBAAmB,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;IACvG,CAAC;IAED;;;OAGG;IACH,6BAA6B,IAAqB;QACjD,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACf,wBAAgC;YAChC,wBAAgC;YAChC;gBACC,MAAM,CAAC,YAAY,CAAC;YACrB;gBACC,MAAM,CAAC,MAAM,CAAC;YACf;gBACC,MAAM,CAAC,YAAY,CAAC;YACrB;gBACC,MAAM,CAAC,UAAU,CAAC;YACnB;gBACC,MAAM,CAAC,KAAK,CAAC;YACd,wBAA+B;YAC/B;gBACC,MAAM,CAAC,MAAM,CAAC;YACf;gBACC,MAAM,CAAC,WAAW,CAAC;YACpB;gBACC,MAAM,CAAC,KAAK,CAAC;YACd;gBACC,MAAM,CAAC,SAAS,CAAC;QAClB,CAAC;IACF,CAAC;IAED,6BAAoC,IAAY;QAC/C,IAAM,SAAS,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChD,IAAM,SAAS,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;QAClC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACpB,KAAK,KAAK,CAAC;YACX,KAAK,IAAI;gBACR,EAAE,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;oBAC7B,MAAM,oBAA4B;gBACnC,CAAC;gBACD,MAAM,oBAA4B;YACnC,KAAK,MAAM;gBACV,MAAM,cAAsB;YAC7B,KAAK,IAAI,CAAC;YACV,KAAK,KAAK,CAAC;YACX,KAAK,IAAI;gBACR,MAAM,oBAA4B;YACnC,KAAK,IAAI;gBACR,MAAM,kBAA0B;YACjC,KAAK,KAAK;gBACT,MAAM,aAAqB;YAC5B,KAAK,MAAM;gBACV,MAAM,cAAsB;YAC7B,KAAK,KAAK;gBACT,MAAM,aAAqB;YAC5B,KAAK,KAAK;gBACT,MAAM,oBAA2B;YAClC;gBACC,MAAM,oBAA2B;QAClC,CAAC;IACF,CAAC;IA7BD,kDA6BC;IAGD,IAAM,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,YAAY,CAAC;IAE9D,IAAM,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC;IAEpD,oBAAoB,IAAwB;QAC3C,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACf,KAAK,UAAU;gBACd,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YACzB,KAAK,OAAO,CAAC;YACb,KAAK,cAAc;gBAClB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;YACtB;gBACC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;QACrB,CAAC;IACF,CAAC;IAED,yBAAyB,IAAY;QACpC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACf,KAAK,KAAK;gBACT,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC;YACzB,KAAK,KAAK;gBACT,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC;YACzB,KAAK,KAAK,CAAC;YACX,KAAK,QAAQ;gBACZ,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC;YAC5B,KAAK,KAAK,CAAC;YACX,KAAK,QAAQ;gBACZ,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC;YAC5B,KAAK,KAAK,CAAC;YACX,KAAK,QAAQ;gBACZ,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC;YAC5B,KAAK,QAAQ;gBACZ,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC;YAC5B,KAAK,QAAQ,CAAC;YACd;gBACC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC;QACzB,CAAC;IACF,CAAC;IAED;QAA6B,2BAAO;QAApC;YAAA,qEAiaC;YA3ZA;;eAEG;YACK,cAAQ,GAAG,IAAI,iBAAO,EAAgC,CAAC;;QAwZhE,CAAC;QAtZA;;;;WAIG;QACW,kCAAgB,GAA9B,UAA+B,QAAgC,EAAE,QAAgB;;;;;gCAE5E,qBAAM,QAAQ,CAAC,6BAA6B,EAAE,EAAA;;iCAA9C,CAAA,KAAA,CAAA,SAA8C,CAAA,CAAA;4BAC9C,qBAAM,QAAQ,CAAC,sBAAsB,CAAC,QAAQ,CAAC,EAAA;;kCAA/C,SAA+C;4BAC/C,qBAAM,QAAQ,CAAC,uBAAuB,CAAC,QAAQ,CAAC,EAAA;;4BAH9C,WAAW,2BAGb,SAAgD,GACnD;4BAED,WAAW,CAAC,OAAO,CAAC,UAAC,UAAU;gCAC9B,IAAM,OAAO,GAAG,4BAA4B,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;gCAC3E,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oCACnC,IAAA,oEAAqF,EAAnF,cAAI,EAAE,wBAAS,CAAqE;oCAC5F,OAAO,CAAC,IAAI,CAAC,WAAS,UAAU,CAAC,IAAI,CAAC,QAAQ,WAAK,IAAI,GAAG,CAAC,WAAI,SAAS,GAAG,CAAC,YAAM,OAAS,CAAC,CAAC;gCAC9F,CAAC;gCACD,IAAI,CAAC,CAAC;oCACL,OAAO,CAAC,IAAI,CAAC,YAAU,OAAS,CAAC,CAAC;gCACnC,CAAC;4BACF,CAAC,CAAC,CAAC;;;;;SACH;QAED;;;WAGG;QACW,6BAAW,GAAzB,UAA0B,QAAgB;;;;;;4BACzC,KAAA,IAAI,CAAA;4BAAmB,qBAAM,iBAAO,CAAC,QAAQ,CAAC,EAAA;gCAA9B,qBAAM,CAAC,SAAuB,CAAC,CAAC,IAAI,EAAe,EAAA;;4BAAnE,GAAK,QAAQ,GAAG,SAAmD,CAAC;;;;;SACpE;QAED;;;WAGG;QACK,qCAAmB,GAA3B,UAA4B,IAAiB;YAC5C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC9B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC7B,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;QACjC,CAAC;QAED;;;WAGG;QACK,sCAAoB,GAA5B;YACC,IAAI,CAAC,QAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAC,EAA8B;oBAA5B,kBAAc,EAAE,cAAI,EAAE,cAAI;gBACpE,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,kBAAkB,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,IAAI,gBAAwB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC,CAAC;YAC/H,CAAC,CAAC,CAAC;QACJ,CAAC;QAED;;;WAGG;QACK,kCAAgB,GAAxB;YAAA,iBAQC;YAPA,IAAI,CAAC,QAAS,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;gBACzB,IAAA,oBAAc,EAAE,gBAAI,EAAE,gBAAI,CAAU;gBAC5C,EAAE,CAAC,CAAC,IAAI,uBAA+B,IAAI,IAAI,uBAA+B,CAAC,CAAC,CAAC;oBAChF,IAAM,QAAQ,GAAG,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;oBAChD,QAAQ,CAAC,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,kBAAkB,CAAC,WAAW,CAAC,IAAI,EAAE,UAAU,GAAG,QAAQ,CAAC,CAAC;gBACnH,CAAC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAED;;;WAGG;QACK,2CAAyB,GAAjC;YAES,IAAA,2CAAoB,EAApB,yCAAoB,CAA6B;YACzD,IAAM,OAAO,GAAoB,EAAE,CAAC;YAEpC,+BAA+B;YAE9B,IAAA,+DAAsB,EACtB,yBAAG,EACH,uCAAU,EACV,yBAAG,EACH,6CAAa,EACb,+CAAc,EACd,qDAAiB,EACjB,6BAAK,EACL,+CAAc,EACd,uDAAkB,EAClB,mDAAgB,EAChB,+BAAM,EACN,6BAAK,CACc;YACpB,aAAM,CAAC,OAAO,EAAE;gBACf,sBAAsB,wBAAA;gBACtB,GAAG,EAAE,UAAU,CAAC,GAAG,CAAC;gBACpB,UAAU,YAAA;gBACV,GAAG,KAAA;gBACH,aAAa,eAAA;gBACb,cAAc,gBAAA;gBACd,iBAAiB,mBAAA;gBACjB,KAAK,OAAA;gBACL,cAAc,gBAAA;gBACd,kBAAkB,oBAAA;gBAClB,gBAAgB,kBAAA;gBAChB,MAAM,EAAE,eAAe,CAAC,MAAM,CAAC;gBAC/B,KAAK,OAAA;aACc,CAAC,CAAC;YAEtB,8BAA8B;YAC9B,aAAM,CAAC,OAAO,EAAE;gBACf,oBAAoB,EAAE,IAAI;gBAC1B,aAAa,EAAE,IAAI;gBACnB,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG;gBAClD,gBAAgB,EAAE,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,oBAAoB,CAAC,MAAM;gBACzE,aAAa,EAAE,IAAI;gBACnB,SAAS,EAAE,IAAI,CAAC,6EAA6E;aAC1E,CAAC,CAAC;YAEtB,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAC5E,CAAC;QAED;;WAEG;QACK,+BAAa,GAArB;YAAA,iBAUC;YATA,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,MAAM,CAAC;YACR,CAAC;YACD,IAAI,CAAC,QAAQ,CAAC,KAAK;iBACjB,MAAM,CAAC,UAAC,EAAQ;oBAAN,cAAI;gBAAO,OAAA,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC;YAAtB,CAAsB,CAAC;iBAC5C,OAAO,CAAC,UAAC,IAAI;gBACb,IAAI,CAAC,IAAI,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;gBACpD,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;QACL,CAAC;QAED;;;WAGG;QACW,kCAAgB,GAA9B,UAA+B,aAA0B;;;;;;4BACxD,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;4BACpC,qBAAM,oBAAc,CAAC,aAAa,CAAC,EAAA;;4BAArD,cAAc,GAAG,CAAC,SAAmC,CAAC,CAAC,CAAC,CAAC;4BACvD,kBAAkB,GAAG,YAAI,CAAC,IAAI,CAAC,QAAS,CAAC,KAAK,EAAE,CAAC,UAAC,EAAQ;oCAAN,cAAI;gCAAO,OAAA,IAAI,KAAK,cAAc,CAAC,IAAI;4BAA5B,CAA4B,CAAC,CAAC,CAAC;4BACpG,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;gCACxB,kBAAkB,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC;gCAC9C,cAAc,GAAG,kBAAkB,CAAC;4BACrC,CAAC;4BACD,IAAI,CAAC,CAAC;gCACL,IAAI,CAAC,QAAS,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;4BAC3C,CAAC;4BAGO,IAAI,GAAW,cAAc,KAAzB,EAAE,IAAI,GAAK,cAAc,KAAnB,CAAoB;4BAChC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;4BAC1D,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;gCAC7B,QAAQ,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;4BACnC,CAAC;4BACD,QAAQ,CAAC,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,kBAAkB,CAAC,WAAW,CAAC,IAAI,EAAE,UAAU,GAAG,IAAI,CAAC,CAAC;;;;;SAC9G;QAEK,yBAAO,GAAb,UAAc,IAAiB;;;;;4BAC9B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gCACpB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;4BACxC,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gCAC9B,MAAM,IAAI,KAAK,CAAC,YAAS,IAAI,CAAC,IAAI,kCAA8B,CAAC,CAAC;4BACnE,CAAC;4BACD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BAC/B,qBAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAA;;4BAAlC,SAAkC,CAAC;;;;;SACnC;QAED;;WAEG;QACG,sBAAI,GAAV;;;;;;;4BACC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gCACpB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;4BACxC,CAAC;4BAEK,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK;iCAC5C,MAAM,CAAC,UAAC,EAAQ;oCAAN,cAAI;gCAAO,OAAA,IAAI,uBAA+B,IAAI,IAAI,uBAA+B;4BAA1E,CAA0E,CAAC;iCAChG,GAAG,CAAC,UAAC,EAAQ;oCAAN,cAAI;gCAAO,OAAA,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG;4BAA3B,CAA2B,CAAC,CAAC;4BACjC,qBAAM,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,mBAAmB,EAAE,EAAA;;4BAAjE,MAAM,GAAG,CAAC,SAAuD,CAAqB;4BAC3E,qBAAM,MAAM,eAAI,kBAAkB,GAAC;;4BAA9C,QAAQ,GAAG,SAAmC;4BAErC,qBAAM,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAO,IAAI;;;;;gDAC5D,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;gDACd,qBAAM,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAA;;gDAAnD,UAAU,GAAG,SAAsC;gDACzD,qBAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAA;;gDAA/C,SAA+C,CAAC;gDAChD,sBAAO,UAAU,EAAC;;;qCAClB,CAAC,CAAC,EAAA;;4BALG,MAAM,GAAG,SAKZ;4BAEc,qBAAM,aAAU,eAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,qBAAqB;qCAC5E,MAAM,CAAC,UAAC,EAAQ;wCAAN,cAAI;oCAAO,OAAA,IAAI,gBAAwB;gCAA5B,CAA4B,CAAC;qCAClD,GAAG,CAAC,UAAC,EAAc;wCAAZ,cAAI,EAAE,cAAI;oCAAS,MAAM,CAAC,EAAE,KAAK,EAAE,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,MAAA,EAAE,CAAC;gCAAC,CAAC,CAAC;qCAC7E,GAAG,CAAC,UAAC,EAAe;wCAAb,gBAAK,EAAE,cAAI;oCAAS,MAAM,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,IAAI,MAAA,EAAE,CAAC;gCAAC,CAAC,CAAC,GAAC;;4BAHlH,QAAQ,GAAG,SAGuG;4BAElH,SAAS,GAAG,cAAW,eAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,gCAAgC;iCACnF,MAAM,CAAC,UAAC,EAAQ;oCAAN,cAAI;gCAAO,OAAA,IAAI,iBAAyB;4BAA7B,CAA6B,CAAC;iCACnD,GAAG,CAAC,UAAC,EAAc;oCAAZ,cAAI,EAAE,cAAI;gCAAS,MAAM,CAAC,EAAE,KAAK,EAAE,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,MAAA,EAAE,CAAC;4BAAC,CAAC,CAAC;iCAC7E,GAAG,CAAC,UAAC,EAAe;oCAAb,gBAAK,EAAE,cAAI;gCAAS,MAAM,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,IAAI,MAAA,EAAE,CAAC;4BAAC,CAAC,CAAC,CAAC,CAAC;4BAEnH,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,gCAAgC;iCACrE,MAAM,CAAC,UAAC,EAAQ;oCAAN,cAAI;gCAAO,OAAA,IAAI,uBAA+B,IAAI,IAAI,uBAA+B,IAAI,IAAI,gBAAwB,IAAI,IAAI,iBAAyB;4BAA3I,CAA2I,CAAC;iCACjK,GAAG,CAAC,UAAC,EAAc;oCAAZ,cAAI,EAAE,cAAI;gCAAS,MAAM,CAAC,EAAE,KAAK,EAAE,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,MAAA,EAAE,CAAC;4BAAC,CAAC,CAAC;iCAC7E,GAAG,CAAC,UAAC,EAAe;oCAAb,gBAAK,EAAE,cAAI;gCAAS,MAAM,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,IAAI,MAAA,EAAE,CAAC;4BAAC,CAAC,CAAC,CAAC;4BAExH,sBAAO,MAAM;qCACX,MAAM,CAAC,UAAC,QAAQ,EAAE,MAAM,IAAK,OAAA,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,EAAnC,CAAmC,EAAE,EAAkB,CAAC;qCACrF,GAAG,CAAC,UAAC,EAAc;wCAAZ,cAAI,EAAE,cAAI;oCACjB,MAAM,CAAC;wCACN,IAAI,MAAA;wCACJ,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;wCAClC,IAAI,EAAE,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,oBAA4B,CAAC,mBAA0B;qCAClG,CAAC;gCACH,CAAC,CAAC;qCACD,MAAM,CAAC,QAAQ,EAAE,SAAS,EAAE,UAAU,CAAC,EAAC;;;;SAC1C;QAED;;WAEG;QACH,qBAAG,GAAH;YACC,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;QAED;;;WAGG;QACH,iCAAe,GAAf,UAAgB,UAAkB;YAAlB,2BAAA,EAAA,kBAAkB;YACjC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACxC,CAAC;YACD,MAAM,CAAC,aAAM,CAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC3H,CAAC;QAED;;;;WAIG;QACH,yBAAO,GAAP,UAAQ,QAAgB;YACvB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACxC,CAAC;YACD,MAAM,CAAC,YAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAC,EAAQ;oBAAN,cAAI;gBAAO,OAAA,IAAI,KAAK,QAAQ;YAAjB,CAAiB,CAAC,CAAC;QACnE,CAAC;QAED;;;;WAIG;QACH,0BAAQ,GAAR;YAAS,eAA2B;iBAA3B,UAA2B,EAA3B,qBAA2B,EAA3B,IAA2B;gBAA3B,0BAA2B;;YACnC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACxC,CAAC;YACD,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,EAAQ;oBAAN,cAAI;gBAAO,OAAA,IAAI;YAAJ,CAAI,CAAC,CAAC;YAC9D;0EAC8D;YAC9D,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK;iBACxB,MAAM,CAAC,UAAC,EAAc;oBAAZ,cAAI,EAAE,cAAI;gBAAO,OAAA,CAAC,CAAC,IAAI,uBAA+B,IAAI,gBAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,gBAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAA5I,CAA4I,CAAC,CAAC;QAC5K,CAAC;QAED;;;WAGG;QACH,8BAAY,GAAZ,UAAa,QAAgB;YAC5B,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACX,MAAM,IAAI,KAAK,CAAC,YAAS,QAAQ,mCAA+B,CAAC,CAAC;YACnE,CAAC;YACD,IAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAChD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBACrB,QAAQ,CAAC,KAAK,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAC1C,CAAC;YACD,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;QACvB,CAAC;QAED;;;;WAIG;QACH,8BAAY,GAAZ;YAAa,eAA2B;iBAA3B,UAA2B,EAA3B,qBAA2B,EAA3B,IAA2B;gBAA3B,0BAA2B;;YACvC,MAAM,CAAC,IAAI,CAAC,QAAQ,OAAb,IAAI,EAAa,KAAK,EAC3B,GAAG,CAAC,UAAC,EAAQ;oBAAN,cAAI;gBAAO,OAAA,IAAI;YAAJ,CAAI,CAAC,CAAC;QAC3B,CAAC;QAED;;;WAGG;QACH,6BAAW,GAAX,UAAY,QAAgB;YAC3B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC/C,CAAC;QAED;;WAEG;QACH,8BAAY,GAAZ;YACC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACxC,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC9C,CAAC;QAED;;WAEG;QACG,4BAAU,GAAhB;;;;;gCACiB,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;4BAA3B,OAAO,GAAG,SAAiB;4BAE3B,OAAO,GAAG,OAAO;iCACrB,MAAM,CAAC,UAAC,EAAQ;oCAAN,cAAI;gCAAO,OAAA,IAAI,uBAA+B,IAAI,IAAI,uBAA8B;4BAAzE,CAAyE,CAAC;iCAC/F,MAAM,CAAC,UAAC,GAAG,EAAE,EAAoB;oCAAlB,cAAI,EAAE,cAAI,EAAE,cAAI;gCAC/B,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;gCAChD,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;oCACnB,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;gCAClC,CAAC;gCACD,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,uBAA+B,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;gCACtE,MAAM,CAAC,GAAG,CAAC;4BACZ,CAAC,EAAE,EAAuD,CAAC,CAAC;4BAEvD,GAAG,GAAG,OAAO;iCACjB,MAAM,CAAC,UAAC,EAAQ;oCAAN,cAAI;gCAAO,OAAA,IAAI,gBAAwB;4BAA5B,CAA4B,CAAC;iCAClD,GAAG,CAAC,UAAC,EAAc;oCAAZ,cAAI,EAAE,cAAI;gCAAS,MAAM,CAAC,EAAE,IAAI,MAAA,EAAE,IAAI,MAAA,EAAE,CAAC;4BAAC,CAAC,CAAC,CAAC;4BAEtD,sBAAO;oCACN,GAAG,KAAA;oCACH,YAAY,EAAE,IAAI,CAAC,eAAe,EAAE;oCACpC,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE;oCACzB,OAAO,SAAA;iCACP,EAAC;;;;SACF;QAED;;;WAGG;QACH,0BAAQ,GAAR,UAAS,QAAgB;YACxB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,IAAI,gBAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC1E,CAAC;QAED;;;;WAIG;QACH,6BAAW,GAAX,UAAY,QAAgB;YAC3B,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACpC,MAAM,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;QAC9D,CAAC;QAED;;WAEG;QACH,0BAAQ,GAAR;YACC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/B,CAAC;QAED;;;;WAIG;QACG,sBAAI,GAAV,UAAW,aAAqB;;;;;4BAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gCACnB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;4BAC/C,CAAC;4BACD,qBAAM,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,EAAA;;4BAArC,SAAqC,CAAC;4BACtC,IAAI,CAAC,yBAAyB,EAAE,CAAC;4BACjC,IAAI,CAAC,oBAAoB,EAAE,CAAC;4BAC5B,IAAI,CAAC,gBAAgB,EAAE,CAAC;;;;;SACxB;QAED;;;;WAIG;QACG,8BAAY,GAAlB,UAAmB,QAAgB,EAAE,KAAe;;;;;;4BAC7C,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;4BACpC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gCACX,MAAM,IAAI,KAAK,CAAC,YAAS,QAAQ,mCAA+B,CAAC,CAAC;4BACnE,CAAC;iCACG,CAAA,IAAI,CAAC,IAAI,gBAAwB,CAAA,EAAjC,wBAAiC;4BACpC,kFAAkF;4BAClF,qBAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAA;;4BADjC,kFAAkF;4BAClF,SAAiC,CAAC;;;4BAGlC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,KAAK,CAAC;;;;;;SAE/C;QAEK,6BAAW,GAAjB,UAAkB,QAAgB,EAAE,KAAa;;;;;4BAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gCAC9B,MAAM,IAAI,KAAK,CAAC,YAAS,QAAQ,mCAA+B,CAAC,CAAC;4BACnE,CAAC;4BACD,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;4BAC5C,qBAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAA;;4BAAjC,SAAiC,CAAC;;;;;SAClC;QACF,cAAC;IAAD,CAAC,AAjaD,CAA6B,iBAAO,GAianC;IAjaY,0BAAO;IAmapB,6DAA6D;IAC7D,IAAM,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;IAC9B,kBAAe,OAAO,CAAC","sourcesContent":["import 'vs/editor/editor.main'; /* imported for side-effects */\n\nimport { ProjectJson, ProjectFile, ProjectFileType } from '@dojo/cli-export-project/interfaces/project.json';\nimport Evented from '@dojo/core/Evented';\nimport { assign } from '@dojo/core/lang';\nimport request from '@dojo/core/request';\nimport { find, includes } from '@dojo/shim/array';\nimport WeakMap from '@dojo/shim/WeakMap';\nimport { DiagnosticMessageChain, OutputFile } from 'typescript';\nimport { getDefinitions, getEmit as getCssEmit } from './support/css';\nimport { getEmit as getJsonEmit } from './support/json';\n\nimport { EmitFile, PromiseLanguageService, TypeScriptWorker } from './interfaces';\n\n/**\n * Interface that provides the data required to run a program.\n */\nexport interface Program {\n\t/**\n\t * Blocks of CSS that the application requires to function properly\n\t */\n\tcss: { name: string; text: string; }[];\n\n\t/**\n\t * Package dependencies which the program requires\n\t */\n\tdependencies: { [pkg: string]: string; };\n\n\t/**\n\t * The HTML document for the program\n\t */\n\thtml: string;\n\n\t/**\n\t * Modules that make up the program, including their source maps\n\t */\n\tmodules: { [mid: string]: { code: string; map: string; } };\n}\n\n/**\n * Interface for private `ProjectFile` data the project needs to track for project files.\n */\ninterface ProjectFileData {\n\t/**\n\t * Set to `true` if the model for the file has been updated in the editor, otherwise `false`.\n\t */\n\tdirty?: boolean;\n\n\t/**\n\t * Extra Lib Handle.  When registering files as extra libs in the TypeScript defaults in monaco-editor and we\n\t * subsequently need to update them, we need to store the handle to remove them from the environment.\n\t */\n\textraLibHandle?: monaco.IDisposable;\n\n\t/**\n\t * The associated monaco-editor model for a project file object.\n\t */\n\tmodel?: monaco.editor.IModel;\n}\n\n/**\n * Flatten a TypeScript diagnostic message\n *\n * Ported from `typescript` due to the fact that this is not exposed via `monaco-editor`\n *\n * @param messageText The text of the diagnostic message\n * @param newLine The newline character to use when flattening\n */\nfunction flattenDiagnosticMessageText(messageText: string | DiagnosticMessageChain, newLine: string): string {\n\tif (typeof messageText === 'string') {\n\t\treturn messageText;\n\t}\n\telse {\n\t\tlet diagnosticChain = messageText;\n\t\tlet result = '';\n\n\t\tlet indent = 0;\n\t\twhile (diagnosticChain) {\n\t\t\tif (indent) {\n\t\t\t\tresult += newLine;\n\n\t\t\t\tfor (let i = 0; i < indent; i++) {\n\t\t\t\t\tresult += '  ';\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult += diagnosticChain.messageText;\n\t\t\tindent++;\n\t\t\tdiagnosticChain = diagnosticChain.next!;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n/**\n * Create a monaco-editor model for the specified project file\n * @param param0 The project file to create the model from\n */\nfunction createMonacoModel({ name: filename, text, type }: ProjectFile): monaco.editor.IModel {\n\tconst uri = monaco.Uri.file(filename);\n\treturn monaco.editor.getModel(uri) || monaco.editor.createModel(text, getLanguageFromType(type), uri);\n}\n\n/**\n * Convert a `ProjectFileType` to a monaco-editor language\n * @param type The type to get a monaco-editor language for\n */\nfunction getLanguageFromType(type: ProjectFileType): string {\n\tswitch (type) {\n\tcase ProjectFileType.Definition:\n\tcase ProjectFileType.TypeScript:\n\tcase ProjectFileType.Lib:\n\t\treturn 'typescript';\n\tcase ProjectFileType.HTML:\n\t\treturn 'html';\n\tcase ProjectFileType.JavaScript:\n\t\treturn 'javascript';\n\tcase ProjectFileType.Markdown:\n\t\treturn 'markdown';\n\tcase ProjectFileType.CSS:\n\t\treturn 'css';\n\tcase ProjectFileType.SourceMap:\n\tcase ProjectFileType.JSON:\n\t\treturn 'json';\n\tcase ProjectFileType.PlainText:\n\t\treturn 'plaintext';\n\tcase ProjectFileType.XML:\n\t\treturn 'xml';\n\tdefault:\n\t\treturn 'unknown';\n\t}\n}\n\nexport function getTypeFromFilename(name: string): ProjectFileType {\n\tconst nameparts = name.toLowerCase().split('.');\n\tconst extension = nameparts.pop();\n\tswitch (extension) {\n\tcase 'tsx':\n\tcase 'ts':\n\t\tif (nameparts.pop() === 'd') {\n\t\t\treturn ProjectFileType.Definition;\n\t\t}\n\t\treturn ProjectFileType.TypeScript;\n\tcase 'html':\n\t\treturn ProjectFileType.HTML;\n\tcase 'js':\n\tcase 'jsx':\n\tcase 'es':\n\t\treturn ProjectFileType.JavaScript;\n\tcase 'md':\n\t\treturn ProjectFileType.Markdown;\n\tcase 'css':\n\t\treturn ProjectFileType.CSS;\n\tcase 'json':\n\t\treturn ProjectFileType.JSON;\n\tcase 'xml':\n\t\treturn ProjectFileType.XML;\n\tcase 'map':\n\t\treturn ProjectFileType.SourceMap;\n\tdefault:\n\t\treturn ProjectFileType.PlainText;\n\t}\n}\n\ntype ScriptTarget = monaco.languages.typescript.ScriptTarget;\nconst ScriptTarget = monaco.languages.typescript.ScriptTarget;\ntype JsxEmit = monaco.languages.typescript.JsxEmit;\nconst JsxEmit = monaco.languages.typescript.JsxEmit;\n\nfunction getJsxEmit(type: string | undefined): JsxEmit {\n\tswitch (type) {\n\tcase 'preserve':\n\t\treturn JsxEmit.Preserve;\n\tcase 'react':\n\tcase 'react-native':\n\t\treturn JsxEmit.React;\n\tdefault:\n\t\treturn JsxEmit.None;\n\t}\n}\n\nfunction getScriptTarget(type: string): ScriptTarget {\n\tswitch (type) {\n\tcase 'es3':\n\t\treturn ScriptTarget.ES3;\n\tcase 'es5':\n\t\treturn ScriptTarget.ES5;\n\tcase 'es6':\n\tcase 'es2015':\n\t\treturn ScriptTarget.ES2015;\n\tcase 'es7':\n\tcase 'es2016':\n\t\treturn ScriptTarget.ES2016;\n\tcase 'es8':\n\tcase 'es2017':\n\t\treturn ScriptTarget.ES2017;\n\tcase 'esnext':\n\t\treturn ScriptTarget.ESNext;\n\tcase 'latest':\n\tdefault:\n\t\treturn ScriptTarget.ES5;\n\t}\n}\n\nexport class Project extends Evented {\n\t/**\n\t * The loaded project bundle structure\n\t */\n\tprivate _project: ProjectJson | undefined;\n\n\t/**\n\t * A map of meta data related to project files\n\t */\n\tprivate _fileMap = new WeakMap<ProjectFile, ProjectFileData>();\n\n\t/**\n\t * Check if there are any emit errors for a given file\n\t * @param services The language services to check\n\t * @param filename The reference filename\n\t */\n\tprivate async _checkEmitErrors(services: PromiseLanguageService, filename: string): Promise<void> {\n\t\tconst diagnostics = [\n\t\t\t...await services.getCompilerOptionsDiagnostics(),\n\t\t\t...await services.getSemanticDiagnostics(filename),\n\t\t\t...await services.getSyntacticDiagnostics(filename)\n\t\t];\n\n\t\tdiagnostics.forEach((diagnostic) => {\n\t\t\tconst message = flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n\t\t\tif (diagnostic.file && diagnostic.start) {\n\t\t\t\tconst { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n\t\t\t\tconsole.warn(`Error ${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.warn(`Error: ${message}`);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * An async function which resolves with the parsed text of the project bundle\n\t * @param filename The filename to load the bundle from\n\t */\n\tprivate async _loadBundle(filename: string): Promise<void> {\n\t\tthis._project = await (await request(filename)).json<ProjectJson>();\n\t}\n\n\t/**\n\t * Retrieve the project file meta data being tracked by the project\n\t * @param file The project file\n\t */\n\tprivate _getProjectFileData(file: ProjectFile): ProjectFileData {\n\t\tif (!this._fileMap.has(file)) {\n\t\t\tthis._fileMap.set(file, {});\n\t\t}\n\t\treturn this._fileMap.get(file)!;\n\t}\n\n\t/**\n\t * The the environment files in the monaco-editor environment.  These are the \"non-editable\" files which support the\n\t * project and are usually additional type definitions that the project depends upon.\n\t */\n\tprivate _setEnvironmentFiles(): void {\n\t\tthis._project!.environmentFiles.forEach(({ name: filename, text, type }) => {\n\t\t\tmonaco.languages.typescript.typescriptDefaults.addExtraLib(text, (type === ProjectFileType.Lib ? '' : 'file:///') + filename);\n\t\t});\n\t}\n\n\t/**\n\t * Ensure that any TypeScript project fies are part of the environment, so that TypeScript files can be edited with\n\t * the full context of the project.\n\t */\n\tprivate _setProjectFiles(): void {\n\t\tthis._project!.files.forEach((file) => {\n\t\t\tconst { name: filename, text, type } = file;\n\t\t\tif (type === ProjectFileType.TypeScript || type === ProjectFileType.Definition) {\n\t\t\t\tconst fileData = this._getProjectFileData(file);\n\t\t\t\tfileData.extraLibHandle = monaco.languages.typescript.typescriptDefaults.addExtraLib(text, 'file:///' + filename);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Set the compiler options for the TypeScript environment based on what is provided by the project bundle, combined\n\t * with additional settings that are required for use in the web-editor.\n\t */\n\tprivate _setTypeScriptEnvironment(): void {\n\t\ttype CompilerOptions = monaco.languages.typescript.CompilerOptions;\n\t\tconst { compilerOptions = {} } = this._project!.tsconfig;\n\t\tconst options: CompilerOptions = {};\n\n\t\t/* copied from tsconfig.json */\n\t\tconst {\n\t\t\texperimentalDecorators,\n\t\t\tjsx,\n\t\t\tjsxFactory,\n\t\t\tlib,\n\t\t\tnoImplicitAny,\n\t\t\tnoImplicitThis,\n\t\t\tnoImplicitReturns,\n\t\t\tnoLib,\n\t\t\tnoUnusedLocals,\n\t\t\tnoUnusedParameters,\n\t\t\tstrictNullChecks,\n\t\t\ttarget,\n\t\t\ttypes\n\t\t} = compilerOptions;\n\t\tassign(options, {\n\t\t\texperimentalDecorators,\n\t\t\tjsx: getJsxEmit(jsx),\n\t\t\tjsxFactory,\n\t\t\tlib,\n\t\t\tnoImplicitAny,\n\t\t\tnoImplicitThis,\n\t\t\tnoImplicitReturns,\n\t\t\tnoLib,\n\t\t\tnoUnusedLocals,\n\t\t\tnoUnusedParameters,\n\t\t\tstrictNullChecks,\n\t\t\ttarget: getScriptTarget(target),\n\t\t\ttypes\n\t\t} as CompilerOptions);\n\n\t\t/* asserted for web editing */\n\t\tassign(options, {\n\t\t\tallowNonTsExtensions: true, /* needed for compiling like this */\n\t\t\tinlineSources: true, /* we will embed the sources in the source maps */\n\t\t\tmodule: monaco.languages.typescript.ModuleKind.AMD, /* only support AMD, so only compile to AMD */\n\t\t\tmoduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs, /* only support this for of module resolution */\n\t\t\tnoEmitHelpers: true, /* we will import the helpers */\n\t\t\tsourceMap: true /* we will generate sourcemaps and remap them when we add them to the page */\n\t\t} as CompilerOptions);\n\n\t\tmonaco.languages.typescript.typescriptDefaults.setCompilerOptions(options);\n\t}\n\n\t/**\n\t * Flush any changes that have come from the editor back into the project files.\n\t */\n\tprivate _updateBundle(): void {\n\t\tif (!this._project) {\n\t\t\treturn;\n\t\t}\n\t\tthis._project.files\n\t\t\t.filter(({ name }) => this.isFileDirty(name))\n\t\t\t.forEach((file) => {\n\t\t\t\tfile.text = this.getFileModel(file.name).getValue();\n\t\t\t\tthis.setFileDirty(file.name, true);\n\t\t\t});\n\t}\n\n\t/**\n\t * Update a CSS Module by updating its definition file and adding it to the environment.\n\t * @param cssModuleFile The CSS Module to update\n\t */\n\tprivate async _updateCssModule(cssModuleFile: ProjectFile): Promise<void> {\n\t\tcssModuleFile.text = this.getFileText(cssModuleFile.name);\n\t\tlet definitionFile = (await getDefinitions(cssModuleFile))[0];\n\t\tconst existingDefinition = find(this._project!.files, (({ name }) => name === definitionFile.name));\n\t\tif (existingDefinition) {\n\t\t\texistingDefinition.text = definitionFile.text;\n\t\t\tdefinitionFile = existingDefinition;\n\t\t}\n\t\telse {\n\t\t\tthis._project!.files.push(definitionFile);\n\t\t}\n\n\t\t/* update the extraLib for the definition file */\n\t\tconst { name, text } = definitionFile;\n\t\tconst fileData = this._getProjectFileData(definitionFile);\n\t\tif (fileData.extraLibHandle) {\n\t\t\tfileData.extraLibHandle.dispose();\n\t\t}\n\t\tfileData.extraLibHandle = monaco.languages.typescript.typescriptDefaults.addExtraLib(text, 'file:///' + name);\n\t}\n\n\tasync addFile(file: ProjectFile): Promise<void> {\n\t\tif (!this._project) {\n\t\t\tthrow new Error(`Project not loaded.`);\n\t\t}\n\t\tif (this.includes(file.name)) {\n\t\t\tthrow new Error(`File \"${file.name}\" already exists in project.`);\n\t\t}\n\t\tthis._project.files.push(file);\n\t\tawait this.setFileDirty(file.name);\n\t}\n\n\t/**\n\t * Take the currently loaded project and emit it\n\t */\n\tasync emit(): Promise<EmitFile[]> {\n\t\tif (!this._project) {\n\t\t\tthrow new Error('Project not loaded.');\n\t\t}\n\n\t\tconst typescriptFileUris = this._project.files\n\t\t\t.filter(({ type }) => type === ProjectFileType.Definition || type === ProjectFileType.TypeScript)\n\t\t\t.map(({ name }) => this.getFileModel(name).uri);\n\t\tconst worker = (await monaco.languages.typescript.getTypeScriptWorker()) as TypeScriptWorker;\n\t\tconst services = await worker(...typescriptFileUris);\n\n\t\tconst output = await Promise.all(typescriptFileUris.map(async (file) => {\n\t\t\tconst filename = file.toString();\n\t\t\tconst emitOutput = await services.getEmitOutput(filename);\n\t\t\tawait this._checkEmitErrors(services, filename);\n\t\t\treturn emitOutput;\n\t\t}));\n\n\t\tconst cssFiles = await getCssEmit(...this._project.files /* add css modules */\n\t\t\t.filter(({ type }) => type === ProjectFileType.CSS)\n\t\t\t.map(({ name, type }) => { return { model: this.getFileModel(name), type }; })\n\t\t\t.map(({ model, type }) => { return { name: model.uri.fsPath.replace(/^\\/\\.\\//, ''), text: model.getValue(), type }; }));\n\n\t\tconst jsonFiles = getJsonEmit(...this._project.files /* add json files as a module */\n\t\t\t.filter(({ type }) => type === ProjectFileType.JSON)\n\t\t\t.map(({ name, type }) => { return { model: this.getFileModel(name), type }; })\n\t\t\t.map(({ model, type }) => { return { name: model.uri.fsPath.replace(/^\\/\\.\\//, ''), text: model.getValue(), type }; }));\n\n\t\tconst otherFiles = this._project.files /* add on other project files */\n\t\t\t.filter(({ type }) => type !== ProjectFileType.Definition && type !== ProjectFileType.TypeScript && type !== ProjectFileType.CSS && type !== ProjectFileType.JSON)\n\t\t\t.map(({ name, type }) => { return { model: this.getFileModel(name), type }; })\n\t\t\t.map(({ model, type }) => { return { name: model.uri.fsPath.replace(/^\\/\\.\\//, ''), text: model.getValue(), type }; });\n\n\t\treturn output\n\t\t\t.reduce((previous, output) => previous.concat(output.outputFiles), [] as OutputFile[])\n\t\t\t.map(({ text, name }) => { /* conform to emitted file format */\n\t\t\t\treturn {\n\t\t\t\t\ttext,\n\t\t\t\t\tname: name.replace('file:///', ''),\n\t\t\t\t\ttype: /^(.*\\.(?!map$))?[^.]*$/.test(name) ? ProjectFileType.JavaScript : ProjectFileType.SourceMap\n\t\t\t\t};\n\t\t\t})\n\t\t\t.concat(cssFiles, jsonFiles, otherFiles);\n\t}\n\n\t/**\n\t * Return the currently loaded project bundle.\n\t */\n\tget(): ProjectJson | undefined {\n\t\tthis._updateBundle();\n\t\treturn this._project;\n\t}\n\n\t/**\n\t * The package dependencies for this project\n\t * @param includeDev If `true` it will include development dependencies.  Defaults to `false`.\n\t */\n\tgetDependencies(includeDev = false): { [pkg: string]: string } {\n\t\tif (!this._project) {\n\t\t\tthrow new Error('Project not loaded.');\n\t\t}\n\t\treturn assign({}, this._project.dependencies.production, includeDev ? this._project.dependencies.development : undefined);\n\t}\n\n\t/**\n\t * Retrieve a project file based on the file name from the project bundle, or return `undefined` if the file is not part of\n\t * the project.\n\t * @param filename The file name of the project file\n\t */\n\tgetFile(filename: string): ProjectFile | undefined {\n\t\tif (!this._project) {\n\t\t\tthrow new Error('Project not loaded.');\n\t\t}\n\t\treturn find(this._project.files, ({ name }) => name === filename);\n\t}\n\n\t/**\n\t * Return an array of `ProjectFile` objects which are the files associated with the project.  By default it returns all of\n\t * the files, but to filer based on file type, pass additional arguments of the file types to filter on.\n\t * @param types Return only files that match these project file types\n\t */\n\tgetFiles(...types: ProjectFileType[]): ProjectFile[] {\n\t\tif (!this._project) {\n\t\t\tthrow new Error('Project not loaded.');\n\t\t}\n\t\tconst filenames = this._project.files.map(({ name }) => name);\n\t\t/* while sometimes, CSS Modules Definition files are included in a project bundle, and need to be part of the environment, they\n\t\t * shouldn't be editable and therefore we won't return them */\n\t\treturn this._project.files\n\t\t\t.filter(({ name, type }) => !(type === ProjectFileType.Definition && includes(filenames, name.replace(/\\.d\\.ts$/, ''))) && (types.length ? includes(types, type) : true));\n\t}\n\n\t/**\n\t * Return a monaco-editor model for a specified file name.  Will throw if the filename is not part of the project.\n\t * @param filename The file name of the project file\n\t */\n\tgetFileModel(filename: string): monaco.editor.IModel {\n\t\tconst file = this.getFile(filename);\n\t\tif (!file) {\n\t\t\tthrow new Error(`File \"${filename}\" is not part of the project.`);\n\t\t}\n\t\tconst fileData = this._getProjectFileData(file);\n\t\tif (!fileData.model) {\n\t\t\tfileData.model = createMonacoModel(file);\n\t\t}\n\t\treturn fileData.model;\n\t}\n\n\t/**\n\t * Return an array of strings which are the names of the project files associated with the project.  By default it returns\n\t * all of the files, but to filter based on file type, pass additional arguments of the file types to filter on.\n\t * @param types Return only files that match these project file types\n\t */\n\tgetFileNames(...types: ProjectFileType[]): string[] {\n\t\treturn this.getFiles(...types)\n\t\t\t.map(({ name }) => name);\n\t}\n\n\t/**\n\t * Retrieve the text of the file from the project\n\t * @param filename The file name of the project file\n\t */\n\tgetFileText(filename: string): string {\n\t\treturn this.getFileModel(filename).getValue();\n\t}\n\n\t/**\n\t * Retrieve the text for the index HTML that has been specified in the project\n\t */\n\tgetIndexHtml(): string {\n\t\tif (!this._project) {\n\t\t\tthrow new Error('Project not loaded.');\n\t\t}\n\t\treturn this.getFileText(this._project.index);\n\t}\n\n\t/**\n\t * Resolves with an object which represents the current program which can then be run in a browser\n\t */\n\tasync getProgram(): Promise<Program> {\n\t\tconst program = await this.emit();\n\n\t\tconst modules = program\n\t\t\t.filter(({ type }) => type === ProjectFileType.JavaScript || type === ProjectFileType.SourceMap)\n\t\t\t.reduce((map, { name, text, type }) => {\n\t\t\t\tconst mid = name.replace(/\\.js(?:\\.map)?$/, '');\n\t\t\t\tif (!(mid in map)) {\n\t\t\t\t\tmap[mid] = { code: '', map: '' };\n\t\t\t\t}\n\t\t\t\tmap[mid][type === ProjectFileType.JavaScript ? 'code' : 'map'] = text;\n\t\t\t\treturn map;\n\t\t\t}, {} as { [mid: string]: { code: string; map: string; } });\n\n\t\tconst css = program\n\t\t\t.filter(({ type }) => type === ProjectFileType.CSS)\n\t\t\t.map(({ name, text }) => { return { name, text }; });\n\n\t\treturn {\n\t\t\tcss,\n\t\t\tdependencies: this.getDependencies(),\n\t\t\thtml: this.getIndexHtml(),\n\t\t\tmodules\n\t\t};\n\t}\n\n\t/**\n\t * Return `true` if the specified file name is part of the project, otherwise `false`.\n\t * @param filename The file name\n\t */\n\tincludes(filename: string): boolean {\n\t\treturn Boolean(this._project && includes(this.getFileNames(), filename));\n\t}\n\n\t/**\n\t * Determine if a file, by name is _dirty_ and has not had its contents updated in the project bundle once being edited\n\t * in the editor.\n\t * @param filename The file name\n\t */\n\tisFileDirty(filename: string): boolean {\n\t\tconst file = this.getFile(filename);\n\t\treturn Boolean(file && this._getProjectFileData(file).dirty);\n\t}\n\n\t/**\n\t * Returns `true` if the project is loaded, otherwise `false`\n\t */\n\tisLoaded(): boolean {\n\t\treturn Boolean(this._project);\n\t}\n\n\t/**\n\t * An async function which loads a project JSON bundle file and sets the monaco-editor environment to be\n\t * to edit the project.\n\t * @param filenameOrUrl The project file name or URL to load\n\t */\n\tasync load(filenameOrUrl: string): Promise<void> {\n\t\tif (this._project) {\n\t\t\tthrow new Error('Project is already loaded.');\n\t\t}\n\t\tawait this._loadBundle(filenameOrUrl);\n\t\tthis._setTypeScriptEnvironment();\n\t\tthis._setEnvironmentFiles();\n\t\tthis._setProjectFiles();\n\t}\n\n\t/**\n\t * Set (or unset) the file _dirty_ flag on a project file\n\t * @param filename The file name\n\t * @param reset Set to `true` to unset the _dirty_ flag on the file\n\t */\n\tasync setFileDirty(filename: string, reset?: boolean): Promise<void> {\n\t\tconst file = this.getFile(filename);\n\t\tif (!file) {\n\t\t\tthrow new Error(`File \"${filename}\" is not part of the project.`);\n\t\t}\n\t\tif (file.type === ProjectFileType.CSS) {\n\t\t\t/* the functionality of this method negates setting the dirty flag, so we won't */\n\t\t\tawait this._updateCssModule(file);\n\t\t}\n\t\telse {\n\t\t\tthis._getProjectFileData(file).dirty = !reset;\n\t\t}\n\t}\n\n\tasync setFileText(filename: string, value: string): Promise<void> {\n\t\tif (!this.includes(filename)) {\n\t\t\tthrow new Error(`File \"${filename}\" is not part of the project.`);\n\t\t}\n\t\tthis.getFileModel(filename).setValue(value);\n\t\tawait this.setFileDirty(filename);\n\t}\n}\n\n/* create singleton instance of project for default export */\nconst project = new Project();\nexport default project;\n"]}