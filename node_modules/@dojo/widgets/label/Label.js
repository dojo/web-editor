(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/widget-core/WidgetBase", "@dojo/widget-core/mixins/Themed", "@dojo/widget-core/d", "@dojo/core/lang", "./styles/label.m.css", "../common/styles/base.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var Themed_1 = require("@dojo/widget-core/mixins/Themed");
    var d_1 = require("@dojo/widget-core/d");
    var lang_1 = require("@dojo/core/lang");
    var css = require("./styles/label.m.css");
    var baseCss = require("../common/styles/base.m.css");
    /**
     * Default settings for form labels
     */
    var labelDefaults = {
        content: '',
        before: true,
        hidden: false
    };
    /**
     * This is a helper function for using `extraClasses` with Label.
     * It can be used as follows:
     * extraClasses: { root: parseLabelClasses(this.theme([ css.class1, css.class2 ])) }
     */
    function parseLabelClasses(classes) {
        return Array.isArray(classes) ? classes.filter(function (str) { return str; }).join(' ') : classes || '';
    }
    exports.parseLabelClasses = parseLabelClasses;
    exports.LabelBase = Themed_1.ThemedMixin(WidgetBase_1.WidgetBase);
    var Label = /** @class */ (function (_super) {
        tslib_1.__extends(Label, _super);
        function Label() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Label.prototype.render = function () {
            var _a = this.properties, forId = _a.forId, label = _a.label;
            // assign string or object label properites with defaults
            var labelProps;
            if (typeof label === 'string') {
                labelProps = lang_1.assign({}, labelDefaults, { content: label });
            }
            else {
                labelProps = lang_1.assign({}, labelDefaults, label);
            }
            // add label text node to children
            var labelText = d_1.v('span', {
                innerHTML: labelProps.content,
                classes: [this.theme(css.labelText), labelProps.hidden ? baseCss.visuallyHidden : null]
            });
            if (labelProps.before) {
                this.children.unshift(labelText);
            }
            else {
                this.children.push(labelText);
            }
            return d_1.v('label', {
                classes: this.theme(css.root),
                for: forId
            }, this.children);
        };
        Label = tslib_1.__decorate([
            Themed_1.theme(css)
        ], Label);
        return Label;
    }(exports.LabelBase));
    exports.default = Label;
});
//# sourceMappingURL=Label.js.map