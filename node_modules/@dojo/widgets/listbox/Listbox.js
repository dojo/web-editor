(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/widget-core/diff", "@dojo/widget-core/decorators/diffProperty", "@dojo/widget-core/meta/Dimensions", "@dojo/widget-core/meta/Base", "@dojo/widget-core/mixins/Themed", "@dojo/core/uuid", "@dojo/widget-core/d", "@dojo/widget-core/WidgetBase", "./styles/listbox.m.css", "./ListboxOption"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var diff_1 = require("@dojo/widget-core/diff");
    var diffProperty_1 = require("@dojo/widget-core/decorators/diffProperty");
    var Dimensions_1 = require("@dojo/widget-core/meta/Dimensions");
    var Base_1 = require("@dojo/widget-core/meta/Base");
    var Themed_1 = require("@dojo/widget-core/mixins/Themed");
    var uuid_1 = require("@dojo/core/uuid");
    var d_1 = require("@dojo/widget-core/d");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var css = require("./styles/listbox.m.css");
    var ListboxOption_1 = require("./ListboxOption");
    /* Default scroll meta */
    var ScrollMeta = /** @class */ (function (_super) {
        tslib_1.__extends(ScrollMeta, _super);
        function ScrollMeta() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ScrollMeta.prototype.scroll = function (key, amount) {
            var node = this.getNode(key);
            if (node) {
                node.scrollTop = amount;
            }
        };
        return ScrollMeta;
    }(Base_1.default));
    exports.ScrollMeta = ScrollMeta;
    exports.ThemedBase = Themed_1.ThemedMixin(WidgetBase_1.WidgetBase);
    var Listbox = /** @class */ (function (_super) {
        tslib_1.__extends(Listbox, _super);
        function Listbox() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._boundRenderOption = _this.renderOption.bind(_this);
            _this._idBase = uuid_1.default();
            return _this;
        }
        Listbox.prototype._getOptionDisabled = function (option, index) {
            var getOptionDisabled = this.properties.getOptionDisabled;
            return getOptionDisabled ? getOptionDisabled(option, index) : false;
        };
        Listbox.prototype._getOptionId = function (index) {
            var _a = this.properties, _b = _a.optionData, optionData = _b === void 0 ? [] : _b, getOptionId = _a.getOptionId;
            return getOptionId ? getOptionId(optionData[index], index) : this._idBase + "-" + index;
        };
        Listbox.prototype._onKeyDown = function (event) {
            var _a = this.properties, _b = _a.activeIndex, activeIndex = _b === void 0 ? 0 : _b, key = _a.key, _c = _a.optionData, optionData = _c === void 0 ? [] : _c, onActiveIndexChange = _a.onActiveIndexChange, onOptionSelect = _a.onOptionSelect, onKeyDown = _a.onKeyDown;
            onKeyDown && onKeyDown(event, key);
            var activeItem = optionData[activeIndex];
            var newIndex;
            switch (event.which) {
                case 13 /* Enter */:
                case 32 /* Space */:
                    event.preventDefault();
                    if (!this._getOptionDisabled(activeItem, activeIndex)) {
                        onOptionSelect && onOptionSelect(activeItem, activeIndex, key);
                    }
                    break;
                case 40 /* Down */:
                    event.preventDefault();
                    newIndex = (activeIndex + 1) % optionData.length;
                    onActiveIndexChange && onActiveIndexChange(newIndex, key);
                    break;
                case 38 /* Up */:
                    event.preventDefault();
                    newIndex = (activeIndex - 1 + optionData.length) % optionData.length;
                    onActiveIndexChange && onActiveIndexChange(newIndex, key);
                    break;
                case 36 /* Home */:
                    onActiveIndexChange && onActiveIndexChange(0, key);
                    break;
                case 35 /* End */:
                    onActiveIndexChange && onActiveIndexChange(optionData.length - 1, key);
                    break;
            }
        };
        Listbox.prototype._onOptionClick = function (option, index, key) {
            var _a = this.properties, onActiveIndexChange = _a.onActiveIndexChange, onOptionSelect = _a.onOptionSelect;
            if (!this._getOptionDisabled(option, index)) {
                onActiveIndexChange && onActiveIndexChange(index, key);
                onOptionSelect && onOptionSelect(option, index, key);
            }
        };
        Listbox.prototype.animateScroll = function (scrollValue) {
            this.meta(ScrollMeta).scroll('root', scrollValue);
        };
        Listbox.prototype.calculateScroll = function (previousProperties, _a) {
            var _b = _a.activeIndex, activeIndex = _b === void 0 ? 0 : _b;
            var menuDimensions = this.meta(Dimensions_1.default).get('root');
            var scrollOffset = menuDimensions.scroll.top;
            var menuHeight = menuDimensions.offset.height;
            var optionOffset = this.meta(Dimensions_1.default).get(this._getOptionId(activeIndex)).offset;
            if (optionOffset.top - scrollOffset < 0) {
                this.animateScroll(optionOffset.top);
            }
            else if ((optionOffset.top + optionOffset.height) > (scrollOffset + menuHeight)) {
                this.animateScroll(optionOffset.top + optionOffset.height - menuHeight);
            }
        };
        Listbox.prototype.getModifierClasses = function () {
            var visualFocus = this.properties.visualFocus;
            return [
                visualFocus ? css.focused : null
            ];
        };
        Listbox.prototype.getOptionClasses = function (active, disabled, selected) {
            return [
                css.option,
                active ? css.activeOption : null,
                disabled ? css.disabledOption : null,
                selected ? css.selectedOption : null
            ];
        };
        Listbox.prototype.renderOptionLabel = function (option, index) {
            var getOptionLabel = this.properties.getOptionLabel;
            return getOptionLabel ? getOptionLabel(option, index) : "" + option;
        };
        Listbox.prototype.renderOption = function (option, index) {
            var _a = this.properties, _b = _a.activeIndex, activeIndex = _b === void 0 ? 0 : _b, getOptionSelected = _a.getOptionSelected, theme = _a.theme;
            var disabled = this._getOptionDisabled(option, index);
            var selected = getOptionSelected ? getOptionSelected(option, index) : false;
            return d_1.v('div', { key: this._getOptionId(index) }, [
                d_1.w(ListboxOption_1.default, {
                    active: activeIndex === index,
                    classes: this.getOptionClasses(activeIndex === index, disabled, selected),
                    disabled: disabled,
                    label: this.renderOptionLabel(option, index),
                    id: this._getOptionId(index),
                    index: index,
                    key: "option-" + index,
                    option: option,
                    selected: selected,
                    theme: theme,
                    onClick: this._onOptionClick
                })
            ]);
        };
        Listbox.prototype.renderOptions = function () {
            var _a = this.properties.optionData, optionData = _a === void 0 ? [] : _a;
            return optionData.map(this._boundRenderOption);
        };
        Listbox.prototype.render = function () {
            var _a = this.properties, _b = _a.activeIndex, activeIndex = _b === void 0 ? 0 : _b, describedBy = _a.describedBy, id = _a.id, _c = _a.multiselect, multiselect = _c === void 0 ? false : _c, _d = _a.tabIndex, tabIndex = _d === void 0 ? 0 : _d;
            return d_1.v('div', {
                'aria-activedescendant': this._getOptionId(activeIndex),
                'aria-multiselectable': multiselect ? 'true' : null,
                classes: this.theme(tslib_1.__spread([css.root], this.getModifierClasses())),
                describedBy: describedBy,
                id: id,
                key: 'root',
                role: 'listbox',
                tabIndex: tabIndex,
                onkeydown: this._onKeyDown
            }, this.renderOptions());
        };
        tslib_1.__decorate([
            diffProperty_1.diffProperty('activeIndex', diff_1.auto),
            tslib_1.__metadata("design:type", Function),
            tslib_1.__metadata("design:paramtypes", [Object, Object]),
            tslib_1.__metadata("design:returntype", void 0)
        ], Listbox.prototype, "calculateScroll", null);
        Listbox = tslib_1.__decorate([
            Themed_1.theme(css),
            diffProperty_1.diffProperty('optionData', diff_1.reference)
        ], Listbox);
        return Listbox;
    }(exports.ThemedBase));
    exports.default = Listbox;
});
//# sourceMappingURL=Listbox.js.map