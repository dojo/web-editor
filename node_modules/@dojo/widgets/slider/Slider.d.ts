import { WidgetBase } from '@dojo/widget-core/WidgetBase';
import { ThemedMixin, ThemedProperties } from '@dojo/widget-core/mixins/Themed';
import { LabelOptions } from '../label/Label';
import { DNode } from '@dojo/widget-core/interfaces';
/**
 * @type SliderProperties
 *
 * Properties that can be set on a Slider component
 *
 * @property describedBy       ID of an element that provides more descriptive text
 * @property disabled          Prevents the user from interacting with the form field
 * @property invalid           Indicates the valid is invalid, or required and not filled in
 * @property label             Label settings for form label text, position, and visibility
 * @property max               The maximum value for the slider
 * @property min               The minimum value for the slider
 * @property name              The form widget's name
 * @property output            An optional function that returns a string or DNode for custom output format
 * @property readOnly          Allows or prevents user interaction
 * @property required          Whether or not a value is required
 * @property step              Size of the slider increment
 * @property value             The current value
 * @property vertical          Orients the slider vertically, false by default.
 * @property verticalHeight    Length of the vertical slider (only used if vertical is true)
 * @property onBlur            Called when the input loses focus
 * @property onChange          Called when the node's 'change' event is fired
 * @property onClick           Called when the input is clicked
 * @property onFocus           Called when the input is focused
 * @property onInput           Called when the 'input' event is fired
 * @property onKeyDown         Called on the input's keydown event
 * @property onKeyPress        Called on the input's keypress event
 * @property onKeyUp           Called on the input's keyup event
 * @property onMouseDown       Called on the input's mousedown event
 * @property onMouseUp         Called on the input's mouseup event
 * @property onTouchStart      Called on the input's touchstart event
 * @property onTouchEnd        Called on the input's touchend event
 * @property onTouchCancel     Called on the input's touchcancel event
 */
export interface SliderProperties extends ThemedProperties {
    describedBy?: string;
    disabled?: boolean;
    invalid?: boolean;
    label?: string | LabelOptions;
    max?: number;
    min?: number;
    name?: string;
    output?(value: number): DNode;
    outputIsTooltip?: boolean;
    readOnly?: boolean;
    required?: boolean;
    step?: number;
    value?: number;
    vertical?: boolean;
    verticalHeight?: string;
    onBlur?(event: FocusEvent): void;
    onChange?(event: Event): void;
    onClick?(event: MouseEvent): void;
    onFocus?(event: FocusEvent): void;
    onInput?(event: Event): void;
    onKeyDown?(event: KeyboardEvent): void;
    onKeyPress?(event: KeyboardEvent): void;
    onKeyUp?(event: KeyboardEvent): void;
    onMouseDown?(event: MouseEvent): void;
    onMouseUp?(event: MouseEvent): void;
    onTouchStart?(event: TouchEvent): void;
    onTouchEnd?(event: TouchEvent): void;
    onTouchCancel?(event: TouchEvent): void;
}
export declare const SliderBase: (new (...args: any[]) => ThemedMixin<{}>) & typeof WidgetBase;
export default class Slider extends SliderBase<SliderProperties> {
    private _inputId;
    private _onBlur(event);
    private _onChange(event);
    private _onClick(event);
    private _onFocus(event);
    private _onInput(event);
    private _onKeyDown(event);
    private _onKeyPress(event);
    private _onKeyUp(event);
    private _onMouseDown(event);
    private _onMouseUp(event);
    private _onTouchStart(event);
    private _onTouchEnd(event);
    private _onTouchCancel(event);
    protected getModifierClasses(): (string | null)[];
    protected renderControls(percentValue: number): DNode;
    protected renderOutput(value: number, percentValue: number): DNode;
    render(): DNode;
}
