(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/widget-core/WidgetBase", "@dojo/widget-core/mixins/Themed", "../label/Label", "@dojo/widget-core/d", "@dojo/core/uuid", "./styles/slider.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var Themed_1 = require("@dojo/widget-core/mixins/Themed");
    var Label_1 = require("../label/Label");
    var d_1 = require("@dojo/widget-core/d");
    var uuid_1 = require("@dojo/core/uuid");
    var css = require("./styles/slider.m.css");
    exports.SliderBase = Themed_1.ThemedMixin(WidgetBase_1.WidgetBase);
    var Slider = /** @class */ (function (_super) {
        tslib_1.__extends(Slider, _super);
        function Slider() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // id used to associate input with output
            _this._inputId = uuid_1.default();
            return _this;
        }
        Slider.prototype._onBlur = function (event) { this.properties.onBlur && this.properties.onBlur(event); };
        Slider.prototype._onChange = function (event) { this.properties.onChange && this.properties.onChange(event); };
        Slider.prototype._onClick = function (event) { this.properties.onClick && this.properties.onClick(event); };
        Slider.prototype._onFocus = function (event) { this.properties.onFocus && this.properties.onFocus(event); };
        Slider.prototype._onInput = function (event) { this.properties.onInput && this.properties.onInput(event); };
        Slider.prototype._onKeyDown = function (event) { this.properties.onKeyDown && this.properties.onKeyDown(event); };
        Slider.prototype._onKeyPress = function (event) { this.properties.onKeyPress && this.properties.onKeyPress(event); };
        Slider.prototype._onKeyUp = function (event) { this.properties.onKeyUp && this.properties.onKeyUp(event); };
        Slider.prototype._onMouseDown = function (event) { this.properties.onMouseDown && this.properties.onMouseDown(event); };
        Slider.prototype._onMouseUp = function (event) { this.properties.onMouseUp && this.properties.onMouseUp(event); };
        Slider.prototype._onTouchStart = function (event) { this.properties.onTouchStart && this.properties.onTouchStart(event); };
        Slider.prototype._onTouchEnd = function (event) { this.properties.onTouchEnd && this.properties.onTouchEnd(event); };
        Slider.prototype._onTouchCancel = function (event) { this.properties.onTouchCancel && this.properties.onTouchCancel(event); };
        Slider.prototype.getModifierClasses = function () {
            var _a = this.properties, disabled = _a.disabled, invalid = _a.invalid, readOnly = _a.readOnly, required = _a.required, _b = _a.vertical, vertical = _b === void 0 ? false : _b;
            return [
                disabled ? css.disabled : null,
                invalid ? css.invalid : null,
                invalid === false ? css.valid : null,
                readOnly ? css.readonly : null,
                required ? css.required : null,
                vertical ? css.vertical : null
            ];
        };
        Slider.prototype.renderControls = function (percentValue) {
            var _a = this.properties, _b = _a.vertical, vertical = _b === void 0 ? false : _b, _c = _a.verticalHeight, verticalHeight = _c === void 0 ? '200px' : _c;
            return d_1.v('div', {
                classes: [this.theme(css.track), css.trackFixed],
                'aria-hidden': 'true',
                styles: vertical ? { width: verticalHeight } : {}
            }, [
                d_1.v('span', {
                    classes: [this.theme(css.fill), css.fillFixed],
                    styles: { width: percentValue + "%" }
                }),
                d_1.v('span', {
                    classes: [this.theme(css.thumb), css.thumbFixed],
                    styles: { left: percentValue + "%" }
                })
            ]);
        };
        Slider.prototype.renderOutput = function (value, percentValue) {
            var _a = this.properties, output = _a.output, _b = _a.outputIsTooltip, outputIsTooltip = _b === void 0 ? false : _b, _c = _a.vertical, vertical = _c === void 0 ? false : _c;
            var outputNode = output ? output(value) : "" + value;
            // output styles
            var outputStyles = {};
            if (outputIsTooltip) {
                outputStyles = vertical ? { top: 100 - percentValue + "%" } : { left: percentValue + "%" };
            }
            return d_1.v('output', {
                classes: [this.theme(css.output), outputIsTooltip ? css.outputTooltip : null],
                for: "" + this._inputId,
                styles: outputStyles
            }, [outputNode]);
        };
        Slider.prototype.render = function () {
            var _a = this.properties, describedBy = _a.describedBy, disabled = _a.disabled, invalid = _a.invalid, label = _a.label, _b = _a.max, max = _b === void 0 ? 100 : _b, _c = _a.min, min = _c === void 0 ? 0 : _c, name = _a.name, readOnly = _a.readOnly, required = _a.required, _d = _a.step, step = _d === void 0 ? 1 : _d, _e = _a.vertical, vertical = _e === void 0 ? false : _e, _f = _a.verticalHeight, verticalHeight = _f === void 0 ? '200px' : _f;
            var _g = this.properties.value, value = _g === void 0 ? min : _g;
            value = value > max ? max : value;
            value = value < min ? min : value;
            var percentValue = (value - min) / (max - min) * 100;
            var slider = d_1.v('div', {
                classes: [this.theme(css.inputWrapper), css.inputWrapperFixed],
                styles: vertical ? { height: verticalHeight } : {}
            }, [
                d_1.v('input', {
                    classes: [this.theme(css.input), css.nativeInput],
                    'aria-describedby': describedBy,
                    disabled: disabled,
                    id: this._inputId,
                    'aria-invalid': invalid ? 'true' : null,
                    max: "" + max,
                    min: "" + min,
                    name: name,
                    readOnly: readOnly,
                    'aria-readonly': readOnly ? 'true' : null,
                    required: required,
                    step: "" + step,
                    styles: vertical ? { width: verticalHeight } : {},
                    type: 'range',
                    value: "" + value,
                    onblur: this._onBlur,
                    onchange: this._onChange,
                    onclick: this._onClick,
                    onfocus: this._onFocus,
                    oninput: this._onInput,
                    onkeydown: this._onKeyDown,
                    onkeypress: this._onKeyPress,
                    onkeyup: this._onKeyUp,
                    onmousedown: this._onMouseDown,
                    onmouseup: this._onMouseUp,
                    ontouchstart: this._onTouchStart,
                    ontouchend: this._onTouchEnd,
                    ontouchcancel: this._onTouchCancel
                }),
                this.renderControls(percentValue),
                this.renderOutput(value, percentValue)
            ]);
            var sliderWidget;
            if (label) {
                sliderWidget = d_1.w(Label_1.default, {
                    extraClasses: { root: Label_1.parseLabelClasses(tslib_1.__spread(this.theme(tslib_1.__spread([css.root], this.getModifierClasses())), [css.rootFixed])) },
                    label: label,
                    theme: this.properties.theme
                }, [slider]);
            }
            else {
                sliderWidget = d_1.v('div', {
                    classes: tslib_1.__spread(this.theme(tslib_1.__spread([css.root], this.getModifierClasses())), [css.rootFixed])
                }, [slider]);
            }
            return sliderWidget;
        };
        Slider = tslib_1.__decorate([
            Themed_1.theme(css)
        ], Slider);
        return Slider;
    }(exports.SliderBase));
    exports.default = Slider;
});
//# sourceMappingURL=Slider.js.map