(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/widget-core/WidgetBase", "@dojo/widget-core/mixins/Themed", "@dojo/widget-core/d", "../label/Label", "./styles/textarea.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var Themed_1 = require("@dojo/widget-core/mixins/Themed");
    var d_1 = require("@dojo/widget-core/d");
    var Label_1 = require("../label/Label");
    var css = require("./styles/textarea.m.css");
    exports.TextareaBase = Themed_1.ThemedMixin(WidgetBase_1.WidgetBase);
    var Textarea = /** @class */ (function (_super) {
        tslib_1.__extends(Textarea, _super);
        function Textarea() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Textarea.prototype._onBlur = function (event) { this.properties.onBlur && this.properties.onBlur(event); };
        Textarea.prototype._onChange = function (event) { this.properties.onChange && this.properties.onChange(event); };
        Textarea.prototype._onClick = function (event) { this.properties.onClick && this.properties.onClick(event); };
        Textarea.prototype._onFocus = function (event) { this.properties.onFocus && this.properties.onFocus(event); };
        Textarea.prototype._onInput = function (event) { this.properties.onInput && this.properties.onInput(event); };
        Textarea.prototype._onKeyDown = function (event) { this.properties.onKeyDown && this.properties.onKeyDown(event); };
        Textarea.prototype._onKeyPress = function (event) { this.properties.onKeyPress && this.properties.onKeyPress(event); };
        Textarea.prototype._onKeyUp = function (event) { this.properties.onKeyUp && this.properties.onKeyUp(event); };
        Textarea.prototype._onMouseDown = function (event) { this.properties.onMouseDown && this.properties.onMouseDown(event); };
        Textarea.prototype._onMouseUp = function (event) { this.properties.onMouseUp && this.properties.onMouseUp(event); };
        Textarea.prototype._onTouchStart = function (event) { this.properties.onTouchStart && this.properties.onTouchStart(event); };
        Textarea.prototype._onTouchEnd = function (event) { this.properties.onTouchEnd && this.properties.onTouchEnd(event); };
        Textarea.prototype._onTouchCancel = function (event) { this.properties.onTouchCancel && this.properties.onTouchCancel(event); };
        Textarea.prototype.getModifierClasses = function () {
            var _a = this.properties, disabled = _a.disabled, invalid = _a.invalid, readOnly = _a.readOnly, required = _a.required;
            return [
                disabled ? css.disabled : null,
                invalid ? css.invalid : null,
                invalid === false ? css.valid : null,
                readOnly ? css.readonly : null,
                required ? css.required : null
            ];
        };
        Textarea.prototype.render = function () {
            var _a = this.properties, columns = _a.columns, describedBy = _a.describedBy, disabled = _a.disabled, invalid = _a.invalid, label = _a.label, maxLength = _a.maxLength, minLength = _a.minLength, name = _a.name, placeholder = _a.placeholder, readOnly = _a.readOnly, required = _a.required, rows = _a.rows, value = _a.value, wrapText = _a.wrapText;
            var textarea = d_1.v('div', { classes: this.theme(css.inputWrapper) }, [
                d_1.v('textarea', {
                    classes: this.theme(css.input),
                    cols: columns ? "" + columns : null,
                    'aria-describedby': describedBy,
                    disabled: disabled,
                    'aria-invalid': invalid ? 'true' : null,
                    maxlength: maxLength ? "" + maxLength : null,
                    minlength: minLength ? "" + minLength : null,
                    name: name,
                    placeholder: placeholder,
                    readOnly: readOnly,
                    'aria-readonly': readOnly ? 'true' : null,
                    required: required,
                    rows: rows ? "" + rows : null,
                    value: value,
                    wrap: wrapText,
                    onblur: this._onBlur,
                    onchange: this._onChange,
                    onclick: this._onClick,
                    onfocus: this._onFocus,
                    oninput: this._onInput,
                    onkeydown: this._onKeyDown,
                    onkeypress: this._onKeyPress,
                    onkeyup: this._onKeyUp,
                    onmousedown: this._onMouseDown,
                    onmouseup: this._onMouseUp,
                    ontouchstart: this._onTouchStart,
                    ontouchend: this._onTouchEnd,
                    ontouchcancel: this._onTouchCancel
                })
            ]);
            var textareaWidget;
            if (label) {
                textareaWidget = d_1.w(Label_1.default, {
                    extraClasses: { root: Label_1.parseLabelClasses(this.theme(tslib_1.__spread([css.root], this.getModifierClasses()))) },
                    label: label,
                    theme: this.properties.theme
                }, [textarea]);
            }
            else {
                textareaWidget = d_1.v('div', {
                    classes: this.theme(tslib_1.__spread([css.root], this.getModifierClasses()))
                }, [textarea]);
            }
            return textareaWidget;
        };
        Textarea = tslib_1.__decorate([
            Themed_1.theme(css)
        ], Textarea);
        return Textarea;
    }(exports.TextareaBase));
    exports.default = Textarea;
});
//# sourceMappingURL=Textarea.js.map