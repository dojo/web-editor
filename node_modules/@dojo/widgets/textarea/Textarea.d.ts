import { WidgetBase } from '@dojo/widget-core/WidgetBase';
import { DNode } from '@dojo/widget-core/interfaces';
import { ThemedMixin, ThemedProperties } from '@dojo/widget-core/mixins/Themed';
import { LabelOptions } from '../label/Label';
/**
 * @type TextareaProperties
 *
 * Properties that can be set on a TextInput component
 *
 * @property columns         Number of columns, controls the width of the textarea
 * @property describedBy     ID of an element that provides more descriptive text
 * @property disabled        Prevents the user from interacting with the form field
 * @property invalid         Indicates the value entered in the form field is invalid
 * @property label           Label settings for form label text, position, and visibility
 * @property maxLength       Maximum number of characters allowed in the input
 * @property minLength       Minimum number of characters allowed in the input
 * @property name            The form widget's name
 * @property placeholder     Placeholder text
 * @property readOnly        Allows or prevents user interaction
 * @property required        Whether or not a value is required
 * @property rows            Number of rows, controls the height of the textarea
 * @property value           The current value
 * @property wrapText        Controls text wrapping. Can be "hard", "soft", or "off"
 * @property onBlur          Called when the input loses focus
 * @property onChange        Called when the node's 'change' event is fired
 * @property onClick         Called when the input is clicked
 * @property onFocus         Called when the input is focused
 * @property onInput         Called when the 'input' event is fired
 * @property onKeyDown       Called on the input's keydown event
 * @property onKeyPress      Called on the input's keypress event
 * @property onKeyUp         Called on the input's keyup event
 * @property onMouseDown     Called on the input's mousedown event
 * @property onMouseUp       Called on the input's mouseup event
 * @property onTouchStart    Called on the input's touchstart event
 * @property onTouchEnd      Called on the input's touchend event
 * @property onTouchCancel   Called on the input's touchcancel event
 */
export interface TextareaProperties extends ThemedProperties {
    columns?: number;
    describedBy?: string;
    disabled?: boolean;
    invalid?: boolean;
    label?: string | LabelOptions;
    maxLength?: number | string;
    minLength?: number | string;
    name?: string;
    placeholder?: string;
    readOnly?: boolean;
    required?: boolean;
    rows?: number;
    value?: string;
    wrapText?: 'hard' | 'soft' | 'off';
    onBlur?(event: FocusEvent): void;
    onChange?(event: Event): void;
    onClick?(event: MouseEvent): void;
    onFocus?(event: FocusEvent): void;
    onInput?(event: Event): void;
    onKeyDown?(event: KeyboardEvent): void;
    onKeyPress?(event: KeyboardEvent): void;
    onKeyUp?(event: KeyboardEvent): void;
    onMouseDown?(event: MouseEvent): void;
    onMouseUp?(event: MouseEvent): void;
    onTouchStart?(event: TouchEvent): void;
    onTouchEnd?(event: TouchEvent): void;
    onTouchCancel?(event: TouchEvent): void;
}
export declare const TextareaBase: (new (...args: any[]) => ThemedMixin<{}>) & typeof WidgetBase;
export default class Textarea extends TextareaBase<TextareaProperties> {
    private _onBlur(event);
    private _onChange(event);
    private _onClick(event);
    private _onFocus(event);
    private _onInput(event);
    private _onKeyDown(event);
    private _onKeyPress(event);
    private _onKeyUp(event);
    private _onMouseDown(event);
    private _onMouseUp(event);
    private _onTouchStart(event);
    private _onTouchEnd(event);
    private _onTouchCancel(event);
    protected getModifierClasses(): (string | null)[];
    render(): DNode;
}
