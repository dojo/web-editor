(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/widget-core/WidgetBase", "@dojo/widget-core/mixins/Themed", "@dojo/widget-core/d", "@dojo/core/uuid", "./styles/dialog.m.css", "../common/styles/icons.m.css", "../common/styles/animations.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var Themed_1 = require("@dojo/widget-core/mixins/Themed");
    var d_1 = require("@dojo/widget-core/d");
    var uuid_1 = require("@dojo/core/uuid");
    var css = require("./styles/dialog.m.css");
    var iconCss = require("../common/styles/icons.m.css");
    var animations = require("../common/styles/animations.m.css");
    ;
    exports.DialogBase = Themed_1.ThemedMixin(WidgetBase_1.WidgetBase);
    var Dialog = /** @class */ (function (_super) {
        tslib_1.__extends(Dialog, _super);
        function Dialog() {
            var _this = _super.call(this) || this;
            _this._titleId = uuid_1.default();
            _this._onKeyUp = function (event) {
                if (event.which === 27 /* Escape */) {
                    _this._onCloseClick();
                }
            };
            document.addEventListener('keyup', _this._onKeyUp);
            return _this;
        }
        Dialog.prototype._onCloseClick = function () {
            var _a = this.properties, _b = _a.closeable, closeable = _b === void 0 ? true : _b, onRequestClose = _a.onRequestClose;
            closeable && onRequestClose && onRequestClose();
        };
        Dialog.prototype._onUnderlayClick = function () {
            !this.properties.modal && this._onCloseClick();
        };
        Dialog.prototype.onDetach = function () {
            document.removeEventListener('keyup', this._onKeyUp);
        };
        Dialog.prototype.getContent = function () {
            return d_1.v('div', {
                classes: this.theme(css.content),
                key: 'content'
            }, this.children);
        };
        Dialog.prototype.renderCloseIcon = function () {
            return d_1.v('i', { classes: this.theme([iconCss.icon, iconCss.closeIcon]),
                role: 'presentation', 'aria-hidden': 'true'
            });
        };
        Dialog.prototype.renderTitle = function () {
            var _a = this.properties.title, title = _a === void 0 ? '' : _a;
            return d_1.v('div', { id: this._titleId }, [title]);
        };
        Dialog.prototype.renderUnderlay = function () {
            var underlay = this.properties.underlay;
            return d_1.v('div', {
                classes: [this.theme(underlay ? css.underlayVisible : null), css.underlay],
                enterAnimation: animations.fadeIn,
                exitAnimation: animations.fadeOut,
                key: 'underlay',
                onclick: this._onUnderlayClick
            });
        };
        Dialog.prototype.render = function () {
            var _a = this.properties, _b = _a.closeable, closeable = _b === void 0 ? true : _b, _c = _a.closeText, closeText = _c === void 0 ? 'close dialog' : _c, _d = _a.enterAnimation, enterAnimation = _d === void 0 ? animations.fadeIn : _d, _e = _a.exitAnimation, exitAnimation = _e === void 0 ? animations.fadeOut : _e, onOpen = _a.onOpen, _f = _a.open, open = _f === void 0 ? false : _f, _g = _a.role, role = _g === void 0 ? 'dialog' : _g;
            open && !this._wasOpen && onOpen && onOpen();
            this._wasOpen = open;
            return d_1.v('div', {
                classes: this.theme(css.root)
            }, open ? [
                this.renderUnderlay(),
                d_1.v('div', {
                    'aria-labelledby': this._titleId,
                    classes: this.theme(css.main),
                    enterAnimation: enterAnimation,
                    exitAnimation: exitAnimation,
                    key: 'main',
                    role: role
                }, [
                    d_1.v('div', {
                        classes: this.theme(css.title),
                        key: 'title'
                    }, [
                        this.renderTitle(),
                        closeable ? d_1.v('button', {
                            classes: this.theme(css.close),
                            onclick: this._onCloseClick
                        }, [
                            closeText,
                            this.renderCloseIcon()
                        ]) : null
                    ]),
                    this.getContent()
                ])
            ] : []);
        };
        Dialog = tslib_1.__decorate([
            Themed_1.theme(css),
            Themed_1.theme(iconCss),
            tslib_1.__metadata("design:paramtypes", [])
        ], Dialog);
        return Dialog;
    }(exports.DialogBase));
    exports.default = Dialog;
});
//# sourceMappingURL=Dialog.js.map