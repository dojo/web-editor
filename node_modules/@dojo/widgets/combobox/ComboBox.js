(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/widget-core/decorators/diffProperty", "@dojo/widget-core/diff", "@dojo/widget-core/mixins/Themed", "@dojo/widget-core/WidgetBase", "@dojo/core/uuid", "@dojo/widget-core/d", "../label/Label", "../listbox/Listbox", "../textinput/TextInput", "./styles/comboBox.m.css", "../common/styles/icons.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var diffProperty_1 = require("@dojo/widget-core/decorators/diffProperty");
    var diff_1 = require("@dojo/widget-core/diff");
    var Themed_1 = require("@dojo/widget-core/mixins/Themed");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var uuid_1 = require("@dojo/core/uuid");
    var d_1 = require("@dojo/widget-core/d");
    var Label_1 = require("../label/Label");
    var Listbox_1 = require("../listbox/Listbox");
    var TextInput_1 = require("../textinput/TextInput");
    var css = require("./styles/comboBox.m.css");
    var iconCss = require("../common/styles/icons.m.css");
    exports.ThemedBase = Themed_1.ThemedMixin(WidgetBase_1.WidgetBase);
    var ComboBox = /** @class */ (function (_super) {
        tslib_1.__extends(ComboBox, _super);
        function ComboBox() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._activeIndex = 0;
            _this._callInputFocus = false;
            _this._idBase = uuid_1.default();
            _this._menuHasVisualFocus = false;
            return _this;
        }
        ComboBox.prototype._closeMenu = function () {
            this._open = false;
            this.invalidate();
        };
        ComboBox.prototype._getMenuId = function () {
            return this._idBase + "-menu";
        };
        ComboBox.prototype._getResultLabel = function (result) {
            var getResultLabel = this.properties.getResultLabel;
            return getResultLabel ? getResultLabel(result) : "" + result;
        };
        ComboBox.prototype._getResultId = function (result, index) {
            return this._idBase + "-result" + index;
        };
        ComboBox.prototype._onArrowClick = function () {
            var _a = this.properties, disabled = _a.disabled, readOnly = _a.readOnly;
            if (!disabled && !readOnly) {
                this._callInputFocus = true;
                this._openMenu();
            }
        };
        ComboBox.prototype._onClearClick = function () {
            var _a = this.properties, key = _a.key, onChange = _a.onChange;
            this._callInputFocus = true;
            this.invalidate();
            onChange && onChange('', key);
        };
        ComboBox.prototype._onInput = function (event) {
            var _a = this.properties, key = _a.key, onChange = _a.onChange;
            onChange && onChange(event.target.value, key);
            this._openMenu();
        };
        ComboBox.prototype._onInputBlur = function (event) {
            var _a = this.properties, key = _a.key, onBlur = _a.onBlur;
            if (this._ignoreBlur) {
                this._ignoreBlur = false;
                return;
            }
            onBlur && onBlur(event.target.value, key);
            this._closeMenu();
        };
        ComboBox.prototype._onInputFocus = function (event) {
            var _a = this.properties, key = _a.key, onFocus = _a.onFocus, openOnFocus = _a.openOnFocus;
            onFocus && onFocus(event.target.value, key);
            openOnFocus && this._openMenu();
        };
        ComboBox.prototype._onInputKeyDown = function (event) {
            var _a = this.properties, disabled = _a.disabled, _b = _a.isResultDisabled, isResultDisabled = _b === void 0 ? function () { return false; } : _b, readOnly = _a.readOnly, _c = _a.results, results = _c === void 0 ? [] : _c;
            this._menuHasVisualFocus = true;
            switch (event.which) {
                case 38 /* Up */:
                    event.preventDefault();
                    this._moveActiveIndex(-1 /* decrease */);
                    break;
                case 40 /* Down */:
                    event.preventDefault();
                    if (!this._open && !disabled && !readOnly) {
                        this._openMenu();
                    }
                    else if (this._open) {
                        this._moveActiveIndex(1 /* increase */);
                    }
                    break;
                case 27 /* Escape */:
                    this._open && this._closeMenu();
                    break;
                case 13 /* Enter */:
                case 32 /* Space */:
                    if (this._open && results.length > 0) {
                        if (isResultDisabled(results[this._activeIndex])) {
                            return;
                        }
                        this._selectIndex(this._activeIndex);
                    }
                    break;
                case 36 /* Home */:
                    this._activeIndex = 0;
                    this.invalidate();
                    break;
                case 35 /* End */:
                    this._activeIndex = results.length - 1;
                    this.invalidate();
                    break;
            }
        };
        ComboBox.prototype._onMenuChange = function () {
            var _a = this.properties, key = _a.key, onMenuChange = _a.onMenuChange;
            if (!onMenuChange) {
                return;
            }
            this._open && !this._wasOpen && onMenuChange(true, key);
            !this._open && this._wasOpen && onMenuChange(false, key);
        };
        ComboBox.prototype._onResultHover = function () {
            this._menuHasVisualFocus = false;
            this.invalidate();
        };
        ComboBox.prototype._onResultMouseDown = function () {
            // Maintain underlying input focus on next render
            this._ignoreBlur = true;
        };
        ComboBox.prototype._openMenu = function () {
            var _a = this.properties, key = _a.key, onRequestResults = _a.onRequestResults;
            this._activeIndex = 0;
            this._open = true;
            onRequestResults && onRequestResults(key);
            this.invalidate();
        };
        ComboBox.prototype._selectIndex = function (index) {
            var _a = this.properties, key = _a.key, onChange = _a.onChange, _b = _a.results, results = _b === void 0 ? [] : _b;
            this._callInputFocus = true;
            this._closeMenu();
            onChange && onChange(this._getResultLabel(results[index]), key);
        };
        ComboBox.prototype._moveActiveIndex = function (operation) {
            var _a = this.properties.results, results = _a === void 0 ? [] : _a;
            if (results.length === 0) {
                this._activeIndex = 0;
                this.invalidate();
                return;
            }
            var total = results.length;
            var nextIndex = (this._activeIndex + operation + total) % total;
            this._activeIndex = nextIndex;
            this.invalidate();
        };
        ComboBox.prototype.onElementUpdated = function (element, key) {
            if (key === 'root') {
                if (this._callInputFocus) {
                    this._callInputFocus = false;
                    var input = element.querySelector('input');
                    input && input.focus();
                }
            }
        };
        ComboBox.prototype.renderInput = function () {
            var _a = this.properties, clearable = _a.clearable, disabled = _a.disabled, _b = _a.inputProperties, inputProperties = _b === void 0 ? {} : _b, invalid = _a.invalid, readOnly = _a.readOnly, required = _a.required, _c = _a.results, results = _c === void 0 ? [] : _c, _d = _a.value, value = _d === void 0 ? '' : _d, theme = _a.theme;
            return d_1.w(TextInput_1.default, tslib_1.__assign({}, inputProperties, { key: 'textinput', 'aria-activedescendant': this._getResultId(results[this._activeIndex], this._activeIndex), 'aria-owns': this._getMenuId(), classes: this.theme(clearable ? css.clearable : null), controls: this._getMenuId(), disabled: disabled,
                invalid: invalid, onBlur: this._onInputBlur, onFocus: this._onInputFocus, onInput: this._onInput, onKeyDown: this._onInputKeyDown, readOnly: readOnly,
                required: required,
                theme: theme,
                value: value }));
        };
        ComboBox.prototype.renderClearButton = function () {
            var _a = this.properties, disabled = _a.disabled, readOnly = _a.readOnly;
            return d_1.v('button', {
                'aria-controls': this._getMenuId(),
                classes: this.theme(css.clear),
                disabled: disabled,
                readOnly: readOnly,
                onclick: this._onClearClick
            }, [
                'clear combo box',
                d_1.v('i', { classes: this.theme([iconCss.icon, iconCss.closeIcon]),
                    role: 'presentation', 'aria-hidden': 'true'
                })
            ]);
        };
        ComboBox.prototype.renderMenuButton = function () {
            var _a = this.properties, disabled = _a.disabled, readOnly = _a.readOnly;
            return d_1.v('button', {
                classes: this.theme(css.trigger),
                disabled: disabled,
                readOnly: readOnly,
                tabIndex: -1,
                onclick: this._onArrowClick
            }, [
                'open combo box',
                d_1.v('i', {
                    'aria-hidden': 'true',
                    classes: this.theme([iconCss.icon, iconCss.downIcon]),
                    role: 'presentation'
                })
            ]);
        };
        ComboBox.prototype.renderMenu = function (results) {
            var _this = this;
            var _a = this.properties, theme = _a.theme, isResultDisabled = _a.isResultDisabled;
            if (results.length === 0 || !this._open) {
                return null;
            }
            return d_1.v('div', {
                key: 'dropdown',
                classes: this.theme(css.dropdown),
                onmouseover: this._onResultHover,
                onmousedown: this._onResultMouseDown
            }, [
                d_1.w(Listbox_1.default, {
                    activeIndex: this._activeIndex,
                    id: this._getMenuId(),
                    visualFocus: this._menuHasVisualFocus,
                    optionData: results,
                    tabIndex: -1,
                    getOptionDisabled: isResultDisabled,
                    getOptionId: this._getResultId,
                    getOptionLabel: this._getResultLabel,
                    onActiveIndexChange: function (index) {
                        _this._activeIndex = index;
                        _this.invalidate();
                    },
                    onOptionSelect: function (option, index) {
                        _this._selectIndex(index);
                    },
                    theme: theme
                })
            ]);
        };
        ComboBox.prototype.render = function () {
            var _a = this.properties, clearable = _a.clearable, id = _a.id, invalid = _a.invalid, label = _a.label, readOnly = _a.readOnly, required = _a.required, _b = _a.results, results = _b === void 0 ? [] : _b, theme = _a.theme;
            var menu = this.renderMenu(results);
            this._onMenuChange();
            this._wasOpen = this._open;
            var controls = d_1.v('div', {
                classes: this.theme(css.controls)
            }, [
                this.renderInput(),
                clearable ? this.renderClearButton() : null,
                this.renderMenuButton()
            ]);
            if (label) {
                controls = d_1.w(Label_1.default, {
                    label: label,
                    theme: theme
                }, [controls]);
            }
            return d_1.v('div', {
                'aria-expanded': this._open ? 'true' : 'false',
                'aria-haspopup': 'true',
                'aria-readonly': readOnly ? 'true' : 'false',
                'aria-required': required ? 'true' : 'false',
                id: id,
                classes: this.theme([
                    css.root,
                    this._open ? css.open : null,
                    invalid ? css.invalid : null,
                    invalid === false ? css.valid : null
                ]),
                key: 'root',
                role: 'combobox'
            }, [
                controls,
                menu
            ]);
        };
        ComboBox = tslib_1.__decorate([
            Themed_1.theme(css),
            Themed_1.theme(iconCss),
            diffProperty_1.diffProperty('results', diff_1.reference)
        ], ComboBox);
        return ComboBox;
    }(exports.ThemedBase));
    exports.default = ComboBox;
});
//# sourceMappingURL=ComboBox.js.map