{"version":3,"file":"CalendarCell.js","sourceRoot":"","sources":["CalendarCell.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,2DAA0D;IAC1D,0DAAuF;IACvF,yCAAwC;IAExC,6CAA+C;IA2B9C,CAAC;IAEW,QAAA,gBAAgB,GAAG,oBAAW,CAAC,uBAAU,CAAC,CAAC;IAGxD;QAA0C,wCAAwC;QAAlF;;QA8DA,CAAC;QA7DU,uCAAgB,GAA1B,UAA2B,OAAoB,EAAE,GAAW;YAC3D,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC1B,CAAC;QAES,uCAAgB,GAA1B,UAA2B,OAAoB,EAAE,GAAW;YAC3D,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC1B,CAAC;QAEO,iCAAU,GAAlB,UAAmB,OAAoB;YAChC,IAAA,oBAA8C,EAA5C,wBAAS,EAAE,gCAAa,CAAqB;YACrD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACf,OAAO,CAAC,KAAK,EAAE,CAAC;gBAChB,aAAa,IAAI,aAAa,EAAE,CAAC;YAClC,CAAC;QACF,CAAC;QAEO,+BAAQ,GAAhB,UAAiB,KAAiB;YAC3B,IAAA,oBAAqD,EAAnD,cAAI,EAAE,gBAAgB,EAAhB,qCAAgB,EAAE,oBAAO,CAAqB;YAC5D,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACpC,CAAC;QAEO,iCAAU,GAAlB,UAAmB,KAAoB;YAC9B,IAAA,qCAAS,CAAqB;YACtC,SAAS,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC;QAES,iCAAU,GAApB,UAAqB,IAAY;YAChC,MAAM,CAAC,KAAC,CAAC,MAAM,EAAE,CAAE,KAAG,IAAM,CAAE,CAAC,CAAC;QACjC,CAAC;QAES,yCAAkB,GAA5B;YACO,IAAA,oBAIa,EAHlB,gBAAgB,EAAhB,qCAAgB,EAChB,gBAAgB,EAAhB,qCAAgB,EAChB,aAAa,EAAb,kCAAa,CACM;YAEpB,MAAM,CAAC;gBACN,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI;gBAClC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI;gBAClC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI;aAC5B,CAAC;QACH,CAAC;QAES,6BAAM,GAAhB;YACO,IAAA,oBAIa,EAHlB,cAAI,EACJ,iBAAiB,EAAjB,sCAAiB,EACjB,gBAAgB,EAAhB,qCAAgB,CACG;YAEpB,MAAM,CAAC,KAAC,CAAC,IAAI,EAAE;gBACd,GAAG,EAAE,MAAM;gBACX,IAAI,EAAE,UAAU;gBAChB,eAAe,EAAE,KAAG,QAAU;gBAC9B,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5B,OAAO,EAAE,IAAI,CAAC,KAAK,mBAAG,GAAG,CAAC,IAAI,GAAK,IAAI,CAAC,kBAAkB,EAAE,EAAG;gBAC/D,OAAO,EAAE,IAAI,CAAC,QAAQ;gBACtB,SAAS,EAAE,IAAI,CAAC,UAAU;aAC1B,EAAE,CAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAE,CAAC,CAAC;QAC/B,CAAC;QA7DmB,YAAY;YADhC,cAAK,CAAC,GAAG,CAAC;WACU,YAAY,CA8DhC;QAAD,mBAAC;KAAA,AA9DD,CAA0C,wBAAgB,GA8DzD;sBA9DoB,YAAY","sourcesContent":["import { WidgetBase } from '@dojo/widget-core/WidgetBase';\nimport { ThemedMixin, ThemedProperties, theme } from '@dojo/widget-core/mixins/Themed';\nimport { v } from '@dojo/widget-core/d';\nimport { DNode } from '@dojo/widget-core/interfaces';\nimport * as css from './styles/calendar.m.css';\n\n/**\n * @type CalendarCellProperties\n *\n * Properties that can be set on a Calendar Date Cell\n *\n * @property callFocus        Used to immediately call focus on the cell\n * @property date             Integer date value\n * @property disabled         Boolean, whether or not the date is in the current month\n * @property focusable        Boolean, whether or not the date can receive focus\n * @property selected         True if the date is currently selected\n * @property today            True if the date the same as the current day\n * @property onClick          Callback function for the click event\n * @property onFocusCalled    Callback function when the cell receives focus\n * @property onKeyDown        Callback function for the key down event\n */\nexport interface CalendarCellProperties extends ThemedProperties {\n\tcallFocus?: boolean;\n\tdate: number;\n\tdisabled?: boolean;\n\tfocusable?: boolean;\n\tselected?: boolean;\n\ttoday?: boolean;\n\tonClick?(date: number, disabled: boolean): void;\n\tonFocusCalled?(): void;\n\tonKeyDown?(event: KeyboardEvent): void;\n};\n\nexport const CalendarCellBase = ThemedMixin(WidgetBase);\n\n@theme(css)\nexport default class CalendarCell extends CalendarCellBase<CalendarCellProperties> {\n\tprotected onElementCreated(element: HTMLElement, key: string) {\n\t\tthis._callFocus(element);\n\t}\n\n\tprotected onElementUpdated(element: HTMLElement, key: string) {\n\t\tthis._callFocus(element);\n\t}\n\n\tprivate _callFocus(element: HTMLElement) {\n\t\tconst { callFocus, onFocusCalled } = this.properties;\n\t\tif (callFocus) {\n\t\t\telement.focus();\n\t\t\tonFocusCalled && onFocusCalled();\n\t\t}\n\t}\n\n\tprivate _onClick(event: MouseEvent) {\n\t\tconst { date, disabled = false, onClick } = this.properties;\n\t\tonClick && onClick(date, disabled);\n\t}\n\n\tprivate _onKeyDown(event: KeyboardEvent) {\n\t\tconst { onKeyDown } = this.properties;\n\t\tonKeyDown && onKeyDown(event);\n\t}\n\n\tprotected formatDate(date: number): DNode {\n\t\treturn v('span', [ `${date}` ]);\n\t}\n\n\tprotected getModifierClasses(): (string | null)[] {\n\t\tconst {\n\t\t\tdisabled = false,\n\t\t\tselected = false,\n\t\t\ttoday = false\n\t\t} = this.properties;\n\n\t\treturn [\n\t\t\tdisabled ? css.inactiveDate : null,\n\t\t\tselected ? css.selectedDate : null,\n\t\t\ttoday ? css.todayDate : null\n\t\t];\n\t}\n\n\tprotected render(): DNode {\n\t\tconst {\n\t\t\tdate,\n\t\t\tfocusable = false,\n\t\t\tselected = false\n\t\t} = this.properties;\n\n\t\treturn v('td', {\n\t\t\tkey: 'root',\n\t\t\trole: 'gridcell',\n\t\t\t'aria-selected': `${selected}`,\n\t\t\ttabIndex: focusable ? 0 : -1,\n\t\t\tclasses: this.theme([ css.date, ...this.getModifierClasses() ]),\n\t\t\tonclick: this._onClick,\n\t\t\tonkeydown: this._onKeyDown\n\t\t}, [ this.formatDate(date) ]);\n\t}\n}\n"]}