(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/core/uuid", "@dojo/widget-core/mixins/Themed", "@dojo/widget-core/d", "@dojo/widget-core/WidgetBase", "./styles/titlePane.m.css", "../common/styles/icons.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var uuid_1 = require("@dojo/core/uuid");
    var Themed_1 = require("@dojo/widget-core/mixins/Themed");
    var d_1 = require("@dojo/widget-core/d");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var css = require("./styles/titlePane.m.css");
    var iconCss = require("../common/styles/icons.m.css");
    ;
    exports.TitlePaneBase = Themed_1.ThemedMixin(WidgetBase_1.WidgetBase);
    var TitlePane = /** @class */ (function (_super) {
        tslib_1.__extends(TitlePane, _super);
        function TitlePane() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._contentId = uuid_1.default();
            _this._titleId = uuid_1.default();
            return _this;
        }
        TitlePane.prototype._afterRender = function (element) {
            var _this = this;
            // Conditionally adjust top margin. Done manually instead of through Maquette
            // so the underlying DOM is accessible, as we need to know the content height.
            // Put in a rAF to push this operation to the next tick, otherwise
            // element.offsetHeight can be incorrect (e.g. before styling is applied)
            // Note that this will go away when meta support is added to widget-core
            requestAnimationFrame(function () {
                var _a = _this.properties.open, open = _a === void 0 ? true : _a;
                var height = element.offsetHeight;
                element.style.marginTop = open ? '0px' : "-" + height + "px";
            });
        };
        TitlePane.prototype._onTitleClick = function () {
            this._toggle();
        };
        TitlePane.prototype._toggle = function () {
            var _a = this.properties, _b = _a.closeable, closeable = _b === void 0 ? true : _b, key = _a.key, onRequestClose = _a.onRequestClose, onRequestOpen = _a.onRequestOpen, _c = _a.open, open = _c === void 0 ? true : _c;
            if (!closeable) {
                return;
            }
            if (open) {
                onRequestClose && onRequestClose(key);
            }
            else {
                onRequestOpen && onRequestOpen(key);
            }
        };
        TitlePane.prototype.onElementCreated = function (element, key) {
            key === 'content' && this._afterRender(element);
        };
        TitlePane.prototype.onElementUpdated = function (element, key) {
            key === 'content' && this._afterRender(element);
        };
        TitlePane.prototype.getButtonContent = function () {
            return this.properties.title;
        };
        TitlePane.prototype.getFixedModifierClasses = function () {
            var _a = this.properties.closeable, closeable = _a === void 0 ? true : _a;
            return [
                closeable ? css.closeableFixed : null
            ];
        };
        TitlePane.prototype.getModifierClasses = function () {
            var _a = this.properties.closeable, closeable = _a === void 0 ? true : _a;
            return [
                closeable ? css.closeable : null
            ];
        };
        TitlePane.prototype.getPaneContent = function () {
            return this.children;
        };
        TitlePane.prototype.renderExpandIcon = function () {
            var _a = this.properties.open, open = _a === void 0 ? true : _a;
            return d_1.v('i', {
                classes: this.theme([
                    css.arrow,
                    iconCss.icon,
                    open ? iconCss.downIcon : iconCss.rightIcon
                ]),
                role: 'presentation',
                'aria-hidden': 'true'
            });
        };
        TitlePane.prototype.render = function () {
            var _a = this.properties, _b = _a.closeable, closeable = _b === void 0 ? true : _b, headingLevel = _a.headingLevel, _c = _a.open, open = _c === void 0 ? true : _c;
            return d_1.v('div', {
                classes: tslib_1.__spread(this.theme([
                    css.root,
                    open ? css.open : null
                ]), [css.rootFixed])
            }, [
                d_1.v('div', {
                    'aria-level': headingLevel ? String(headingLevel) : null,
                    classes: tslib_1.__spread(this.theme(tslib_1.__spread([css.title], this.getModifierClasses())), [css.titleFixed], this.getFixedModifierClasses()),
                    role: 'heading'
                }, [
                    d_1.v('button', {
                        'aria-controls': this._contentId,
                        'aria-expanded': String(open),
                        disabled: !closeable,
                        classes: this.theme(css.titleButton),
                        id: this._titleId,
                        onclick: this._onTitleClick
                    }, [
                        this.renderExpandIcon(),
                        this.getButtonContent()
                    ])
                ]),
                d_1.v('div', {
                    'aria-hidden': open ? null : 'true',
                    'aria-labelledby': this._titleId,
                    classes: this.theme(css.content),
                    id: this._contentId,
                    key: 'content'
                }, this.getPaneContent())
            ]);
        };
        TitlePane = tslib_1.__decorate([
            Themed_1.theme(css),
            Themed_1.theme(iconCss)
        ], TitlePane);
        return TitlePane;
    }(exports.TitlePaneBase));
    exports.default = TitlePane;
});
//# sourceMappingURL=TitlePane.js.map