import { WidgetBase } from '@dojo/widget-core/WidgetBase';
import { DNode } from '@dojo/widget-core/interfaces';
import { ThemedMixin, ThemedProperties } from '@dojo/widget-core/mixins/Themed';
export declare type ButtonType = 'submit' | 'reset' | 'button' | 'menu';
/**
 * @type ButtonProperties
 *
 * Properties that can be set on a Button component
 *
 * @property describedBy    ID of element with descriptive text
 * @property disabled       Whether the button is disabled or clickable
 * @property popup       		Controls aria-haspopup, aria-expanded, and aria-controls for popup buttons
 * @property name           The button's name attribute
 * @property pressed        Indicates status of a toggle button
 * @property type           Button type can be "submit", "reset", "button", or "menu"
 * @property value          Defines a value for the button submitted with form data
 * @property onBlur         Called when the button loses focus
 * @property onClick        Called when the button is clicked
 * @property onFocus        Called when the button is focused
 * @property onKeyDown      Called on the button's keydown event
 * @property onKeyPress     Called on the button's keypress event
 * @property onKeyUp        Called on the button's keyup event
 * @property onMouseDown    Called on the button's mousedown event
 * @property onMouseUp      Called on the button's mouseup event
 * @property onTouchCancel  Called on the button's touchcancel event
 * @property onTouchEnd     Called on the button's touchend event
 * @property onTouchStart   Called on the button's touchstart event
 */
export interface ButtonProperties extends ThemedProperties {
    describedBy?: string;
    disabled?: boolean;
    id?: string;
    popup?: {
        expanded?: boolean;
        id?: string;
    } | boolean;
    name?: string;
    pressed?: boolean;
    type?: ButtonType;
    value?: string;
    onBlur?(event: FocusEvent): void;
    onClick?(event: MouseEvent): void;
    onFocus?(event: FocusEvent): void;
    onKeyDown?(event: KeyboardEvent): void;
    onKeyPress?(event: KeyboardEvent): void;
    onKeyUp?(event: KeyboardEvent): void;
    onMouseDown?(event: MouseEvent): void;
    onMouseUp?(event: MouseEvent): void;
    onTouchStart?(event: TouchEvent): void;
    onTouchEnd?(event: TouchEvent): void;
    onTouchCancel?(event: TouchEvent): void;
}
export declare const ButtonBase: (new (...args: any[]) => ThemedMixin<{}>) & typeof WidgetBase;
export default class Button extends ButtonBase<ButtonProperties> {
    private _onBlur(event);
    private _onClick(event);
    private _onFocus(event);
    private _onKeyDown(event);
    private _onKeyPress(event);
    private _onKeyUp(event);
    private _onMouseDown(event);
    private _onMouseUp(event);
    private _onTouchStart(event);
    private _onTouchEnd(event);
    private _onTouchCancel(event);
    protected getContent(): DNode[];
    protected getModifierClasses(): (string | null)[];
    protected renderPopupIcon(): DNode;
    render(): DNode;
}
