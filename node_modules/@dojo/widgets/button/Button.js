(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/widget-core/WidgetBase", "@dojo/widget-core/mixins/Themed", "@dojo/widget-core/d", "./styles/button.m.css", "../common/styles/icons.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var Themed_1 = require("@dojo/widget-core/mixins/Themed");
    var d_1 = require("@dojo/widget-core/d");
    var css = require("./styles/button.m.css");
    var iconCss = require("../common/styles/icons.m.css");
    exports.ButtonBase = Themed_1.ThemedMixin(WidgetBase_1.WidgetBase);
    var Button = /** @class */ (function (_super) {
        tslib_1.__extends(Button, _super);
        function Button() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Button.prototype._onBlur = function (event) { this.properties.onBlur && this.properties.onBlur(event); };
        Button.prototype._onClick = function (event) { this.properties.onClick && this.properties.onClick(event); };
        Button.prototype._onFocus = function (event) { this.properties.onFocus && this.properties.onFocus(event); };
        Button.prototype._onKeyDown = function (event) { this.properties.onKeyDown && this.properties.onKeyDown(event); };
        Button.prototype._onKeyPress = function (event) { this.properties.onKeyPress && this.properties.onKeyPress(event); };
        Button.prototype._onKeyUp = function (event) { this.properties.onKeyUp && this.properties.onKeyUp(event); };
        Button.prototype._onMouseDown = function (event) { this.properties.onMouseDown && this.properties.onMouseDown(event); };
        Button.prototype._onMouseUp = function (event) { this.properties.onMouseUp && this.properties.onMouseUp(event); };
        Button.prototype._onTouchStart = function (event) { this.properties.onTouchStart && this.properties.onTouchStart(event); };
        Button.prototype._onTouchEnd = function (event) { this.properties.onTouchEnd && this.properties.onTouchEnd(event); };
        Button.prototype._onTouchCancel = function (event) { this.properties.onTouchCancel && this.properties.onTouchCancel(event); };
        Button.prototype.getContent = function () {
            return this.children;
        };
        Button.prototype.getModifierClasses = function () {
            var _a = this.properties, disabled = _a.disabled, _b = _a.popup, popup = _b === void 0 ? false : _b, pressed = _a.pressed;
            return [
                disabled ? css.disabled : null,
                popup ? css.popup : null,
                pressed ? css.pressed : null
            ];
        };
        Button.prototype.renderPopupIcon = function () {
            return d_1.v('i', { classes: this.theme([css.addon, iconCss.icon, iconCss.downIcon]),
                role: 'presentation', 'aria-hidden': 'true'
            });
        };
        Button.prototype.render = function () {
            var _a = this.properties, describedBy = _a.describedBy, disabled = _a.disabled, id = _a.id, _b = _a.popup, popup = _b === void 0 ? false : _b, name = _a.name, pressed = _a.pressed, type = _a.type, value = _a.value;
            if (popup === true) {
                popup = { expanded: false, id: '' };
            }
            return d_1.v('button', {
                classes: this.theme(tslib_1.__spread([css.root], this.getModifierClasses())),
                disabled: disabled,
                id: id,
                name: name,
                type: type,
                value: value,
                onblur: this._onBlur,
                onclick: this._onClick,
                onfocus: this._onFocus,
                onkeydown: this._onKeyDown,
                onkeypress: this._onKeyPress,
                onkeyup: this._onKeyUp,
                onmousedown: this._onMouseDown,
                onmouseup: this._onMouseUp,
                ontouchstart: this._onTouchStart,
                ontouchend: this._onTouchEnd,
                ontouchcancel: this._onTouchCancel,
                'aria-haspopup': popup ? 'true' : null,
                'aria-controls': popup ? popup.id : null,
                'aria-expanded': popup ? popup.expanded + '' : null,
                'aria-pressed': typeof pressed === 'boolean' ? pressed.toString() : null,
                'aria-describedby': describedBy
            }, tslib_1.__spread(this.getContent(), [
                popup ? this.renderPopupIcon() : null
            ]));
        };
        Button = tslib_1.__decorate([
            Themed_1.theme(css),
            Themed_1.theme(iconCss)
        ], Button);
        return Button;
    }(exports.ButtonBase));
    exports.default = Button;
});
//# sourceMappingURL=Button.js.map