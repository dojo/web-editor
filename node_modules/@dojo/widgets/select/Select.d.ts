import { WidgetBase } from '@dojo/widget-core/WidgetBase';
import { DNode } from '@dojo/widget-core/interfaces';
import { ThemedMixin, ThemedProperties } from '@dojo/widget-core/mixins/Themed';
import { LabelOptions } from '../label/Label';
/**
 * @type SelectProperties
 *
 * Properties that can be set on a Select component
 *
 * @property describedBy       ID of an element that provides more descriptive text
 * @property disabled          Prevents the user from interacting with the form field
 * @property invalid           Indicates the value entered in the form field is invalid
 * @property getOptionDisabled Function that accepts an option's data and index and returns a boolean
 * @property getOptionId       Function that accepts an option's data and index and returns a string id
 * @property getOptionLabel    Function that accepts an option's data and index and returns a DNode label
 * @property getOptionSelected Function that accepts an option's data and index and returns a boolean
 * @property getOptionValue    Function that accepts an option's data and index and returns a string value
 * @property label             Label settings for form label text, position, and visibility
 * @property name              The form widget's name
 * @property options           Array of any type of data for the options
 * @property placeholder       Optional placeholder text, only valid for custom select widgets (useNativeElement must be false or undefined)
 * @property readOnly          Allows or prevents user interaction
 * @property required          Whether or not a value is required
 * @property useNativeElement  Use the native <select> element if true
 * @property value             The current value
 * @property onBlur            Called when the input loses focus
 * @property onChange          Called when the node's 'change' event is fired
 * @property onFocus           Called when the input is focused
 */
export interface SelectProperties extends ThemedProperties {
    describedBy?: string;
    disabled?: boolean;
    invalid?: boolean;
    getOptionDisabled?(option: any, index: number): boolean;
    getOptionId?(option: any, index: number): string;
    getOptionLabel?(option: any): DNode;
    getOptionSelected?(option: any, index: number): boolean;
    getOptionValue?(option: any, index: number): string;
    label?: string | LabelOptions;
    name?: string;
    options?: any[];
    placeholder?: string;
    readOnly?: boolean;
    required?: boolean;
    useNativeElement?: boolean;
    value?: string;
    onBlur?(key?: string | number): void;
    onChange?(option: any, key?: string | number): void;
    onFocus?(key?: string | number): void;
}
export declare const ThemedBase: (new (...args: any[]) => ThemedMixin<{}>) & typeof WidgetBase;
export default class Select extends ThemedBase<SelectProperties> {
    private _callTriggerFocus;
    private _callListboxFocus;
    private _focusedIndex;
    private _ignoreBlur;
    private _open;
    private _baseId;
    private _getOptionLabel(option);
    private _onBlur(event);
    private _onFocus(event);
    private _onNativeChange(event);
    private _openSelect();
    private _closeSelect();
    private _onDropdownKeyDown(event);
    private _onTriggerClick(event);
    private _onTriggerBlur(event);
    private _onTriggerKeyDown(event);
    private _onTriggerMouseDown();
    private _onListboxBlur(event);
    protected getModifierClasses(): (string | null)[];
    protected onElementUpdated(element: HTMLElement, key: string): void;
    protected renderExpandIcon(): DNode;
    protected renderNativeSelect(): DNode;
    protected renderCustomSelect(): DNode;
    protected renderCustomTrigger(): DNode[];
    protected render(): DNode;
}
