(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/widget-core/WidgetBase", "@dojo/widget-core/decorators/diffProperty", "@dojo/widget-core/diff", "@dojo/widget-core/mixins/Themed", "@dojo/widget-core/d", "@dojo/core/uuid", "@dojo/shim/array", "../label/Label", "../listbox/Listbox", "./styles/select.m.css", "../common/styles/icons.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var diffProperty_1 = require("@dojo/widget-core/decorators/diffProperty");
    var diff_1 = require("@dojo/widget-core/diff");
    var Themed_1 = require("@dojo/widget-core/mixins/Themed");
    var d_1 = require("@dojo/widget-core/d");
    var uuid_1 = require("@dojo/core/uuid");
    var array_1 = require("@dojo/shim/array");
    var Label_1 = require("../label/Label");
    var Listbox_1 = require("../listbox/Listbox");
    var css = require("./styles/select.m.css");
    var iconCss = require("../common/styles/icons.m.css");
    exports.ThemedBase = Themed_1.ThemedMixin(WidgetBase_1.WidgetBase);
    var Select = /** @class */ (function (_super) {
        tslib_1.__extends(Select, _super);
        function Select() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._callTriggerFocus = false;
            _this._callListboxFocus = false;
            _this._focusedIndex = 0;
            _this._ignoreBlur = false;
            _this._open = false;
            _this._baseId = uuid_1.default();
            return _this;
        }
        Select.prototype._getOptionLabel = function (option) {
            var getOptionLabel = this.properties.getOptionLabel;
            var fallback = option ? "" + option : '';
            return getOptionLabel ? getOptionLabel(option) : fallback;
        };
        Select.prototype._onBlur = function (event) { this.properties.onBlur && this.properties.onBlur(this.properties.key || ''); };
        Select.prototype._onFocus = function (event) { this.properties.onFocus && this.properties.onFocus(this.properties.key || ''); };
        // native select events
        Select.prototype._onNativeChange = function (event) {
            var _a = this.properties, key = _a.key, getOptionValue = _a.getOptionValue, _b = _a.options, options = _b === void 0 ? [] : _b, onChange = _a.onChange;
            var value = event.target.value;
            var option = array_1.find(options, function (option, index) { return getOptionValue ? getOptionValue(option, index) === value : false; });
            option && onChange && onChange(option, key);
        };
        // custom select events
        Select.prototype._openSelect = function () {
            this._callListboxFocus = true;
            this._ignoreBlur = true;
            this._open = true;
            this._focusedIndex = this._focusedIndex || 0;
            this.invalidate();
        };
        Select.prototype._closeSelect = function () {
            this._ignoreBlur = true;
            this._open = false;
            this.invalidate();
        };
        Select.prototype._onDropdownKeyDown = function (event) {
            if (event.which === 27 /* Escape */) {
                this._callTriggerFocus = true;
                this._closeSelect();
            }
        };
        Select.prototype._onTriggerClick = function (event) {
            this._open ? this._closeSelect() : this._openSelect();
        };
        Select.prototype._onTriggerBlur = function (event) {
            if (this._ignoreBlur) {
                this._ignoreBlur = false;
                return;
            }
            var _a = this.properties, key = _a.key, onBlur = _a.onBlur;
            onBlur && onBlur(key);
            this._closeSelect();
        };
        Select.prototype._onTriggerKeyDown = function (event) {
            if (event.which === 40 /* Down */) {
                this._openSelect();
            }
        };
        Select.prototype._onTriggerMouseDown = function () {
            this._ignoreBlur = true;
        };
        Select.prototype._onListboxBlur = function (event) {
            if (this._ignoreBlur) {
                this._ignoreBlur = false;
                return;
            }
            var _a = this.properties, key = _a.key, onBlur = _a.onBlur;
            onBlur && onBlur(key);
            this._closeSelect();
        };
        Select.prototype.getModifierClasses = function () {
            var _a = this.properties, disabled = _a.disabled, invalid = _a.invalid, readOnly = _a.readOnly, required = _a.required;
            return [
                disabled ? css.disabled : null,
                invalid ? css.invalid : null,
                invalid === false ? css.valid : null,
                readOnly ? css.readonly : null,
                required ? css.required : null
            ];
        };
        Select.prototype.onElementUpdated = function (element, key) {
            if (key === 'root' && this._callListboxFocus) {
                this._callListboxFocus = false;
                var listbox = element.querySelector('[role="listbox"]');
                listbox && listbox.focus();
            }
            if (key === 'trigger' && this._callTriggerFocus) {
                this._callTriggerFocus = false;
                element.focus();
            }
        };
        Select.prototype.renderExpandIcon = function () {
            return d_1.v('span', { classes: this.theme(css.arrow) }, [
                d_1.v('i', { classes: this.theme([iconCss.icon, iconCss.downIcon]),
                    role: 'presentation', 'aria-hidden': 'true'
                })
            ]);
        };
        Select.prototype.renderNativeSelect = function () {
            var _this = this;
            var _a = this.properties, describedBy = _a.describedBy, disabled = _a.disabled, getOptionDisabled = _a.getOptionDisabled, getOptionId = _a.getOptionId, getOptionSelected = _a.getOptionSelected, getOptionValue = _a.getOptionValue, invalid = _a.invalid, name = _a.name, _b = _a.options, options = _b === void 0 ? [] : _b, readOnly = _a.readOnly, required = _a.required, value = _a.value;
            /* create option nodes */
            var optionNodes = options.map(function (option, i) { return d_1.v('option', {
                value: getOptionValue ? getOptionValue(option, i) : '',
                id: getOptionId ? getOptionId(option, i) : undefined,
                disabled: getOptionDisabled ? getOptionDisabled(option, i) : undefined,
                selected: getOptionSelected ? getOptionSelected(option, i) : undefined
            }, [_this._getOptionLabel(option)]); });
            return d_1.v('div', { classes: this.theme(css.inputWrapper) }, [
                d_1.v('select', {
                    classes: this.theme(css.input),
                    'aria-describedby': describedBy,
                    disabled: disabled,
                    'aria-invalid': invalid ? 'true' : null,
                    name: name,
                    readOnly: readOnly,
                    'aria-readonly': readOnly ? 'true' : null,
                    required: required,
                    value: value,
                    onblur: this._onBlur,
                    onchange: this._onNativeChange,
                    onfocus: this._onFocus
                }, optionNodes),
                this.renderExpandIcon()
            ]);
        };
        Select.prototype.renderCustomSelect = function () {
            var _this = this;
            var _a = this.properties, describedBy = _a.describedBy, getOptionDisabled = _a.getOptionDisabled, getOptionId = _a.getOptionId, getOptionLabel = _a.getOptionLabel, getOptionSelected = _a.getOptionSelected, key = _a.key, _b = _a.options, options = _b === void 0 ? [] : _b, theme = _a.theme, onChange = _a.onChange;
            var _c = this, _open = _c._open, _focusedIndex = _c._focusedIndex, _baseId = _c._baseId;
            // create dropdown trigger and select box
            return d_1.v('div', {
                key: 'root',
                classes: this.theme([css.inputWrapper, _open ? css.open : null])
            }, tslib_1.__spread(this.renderCustomTrigger(), [
                d_1.v('div', {
                    classes: this.theme(css.dropdown),
                    onfocusout: this._onListboxBlur,
                    onkeydown: this._onDropdownKeyDown
                }, [
                    d_1.w(Listbox_1.default, {
                        activeIndex: _focusedIndex,
                        describedBy: describedBy,
                        id: _baseId,
                        optionData: options,
                        tabIndex: _open ? 0 : -1,
                        getOptionDisabled: getOptionDisabled,
                        getOptionId: getOptionId,
                        getOptionLabel: getOptionLabel,
                        getOptionSelected: getOptionSelected,
                        theme: theme,
                        onActiveIndexChange: function (index) {
                            _this._focusedIndex = index;
                            _this.invalidate();
                        },
                        onOptionSelect: function (option) {
                            onChange && onChange(option, key);
                            _this._callTriggerFocus = true;
                            _this._closeSelect();
                        }
                    })
                ])
            ]));
        };
        Select.prototype.renderCustomTrigger = function () {
            var _a = this.properties, describedBy = _a.describedBy, disabled = _a.disabled, getOptionSelected = _a.getOptionSelected, invalid = _a.invalid, _b = _a.options, options = _b === void 0 ? [] : _b, placeholder = _a.placeholder, readOnly = _a.readOnly, required = _a.required, value = _a.value;
            var label;
            var isPlaceholder = false;
            var selectedOption = array_1.find(options, function (option, index) {
                return getOptionSelected ? getOptionSelected(option, index) : false;
            });
            if (selectedOption) {
                label = this._getOptionLabel(selectedOption);
            }
            else {
                isPlaceholder = true;
                label = placeholder ? placeholder : this._getOptionLabel(options[0]);
            }
            return [
                d_1.v('button', {
                    'aria-controls': this._baseId,
                    'aria-expanded': "" + this._open,
                    'aria-haspopup': 'listbox',
                    'aria-invalid': invalid ? 'true' : null,
                    'aria-readonly': readOnly ? 'true' : null,
                    'aria-required': required ? 'true' : null,
                    classes: this.theme([css.trigger, isPlaceholder ? css.placeholder : null]),
                    describedBy: describedBy,
                    disabled: disabled,
                    key: 'trigger',
                    value: value,
                    onblur: this._onTriggerBlur,
                    onclick: this._onTriggerClick,
                    onfocus: this._onFocus,
                    onkeydown: this._onTriggerKeyDown,
                    onmousedown: this._onTriggerMouseDown
                }, [label]),
                this.renderExpandIcon()
            ];
        };
        Select.prototype.render = function () {
            var _a = this.properties, label = _a.label, _b = _a.useNativeElement, useNativeElement = _b === void 0 ? false : _b, theme = _a.theme;
            var rootWidget;
            var select = useNativeElement ? this.renderNativeSelect() : this.renderCustomSelect();
            var modifierClasses = this.getModifierClasses();
            if (label) {
                rootWidget = d_1.w(Label_1.default, {
                    extraClasses: { root: Label_1.parseLabelClasses(this.theme(tslib_1.__spread([css.root], modifierClasses))) },
                    forId: this._baseId,
                    label: label,
                    theme: theme
                }, [select]);
            }
            else {
                rootWidget = d_1.v('div', {
                    classes: this.theme(tslib_1.__spread([css.root], modifierClasses))
                }, [select]);
            }
            return rootWidget;
        };
        Select = tslib_1.__decorate([
            Themed_1.theme(css),
            Themed_1.theme(iconCss),
            diffProperty_1.diffProperty('options', diff_1.reference)
        ], Select);
        return Select;
    }(exports.ThemedBase));
    exports.default = Select;
});
//# sourceMappingURL=Select.js.map