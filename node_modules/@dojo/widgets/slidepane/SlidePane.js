(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/widget-core/mixins/Themed", "@dojo/widget-core/d", "@dojo/widget-core/WidgetBase", "../common/styles/animations.m.css", "./styles/slidePane.m.css", "../common/styles/icons.m.css", "@dojo/core/uuid"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var Themed_1 = require("@dojo/widget-core/mixins/Themed");
    var d_1 = require("@dojo/widget-core/d");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var animations = require("../common/styles/animations.m.css");
    var css = require("./styles/slidePane.m.css");
    var iconCss = require("../common/styles/icons.m.css");
    var uuid_1 = require("@dojo/core/uuid");
    ;
    ;
    /**
     * The default width of the slide pane
     */
    var DEFAULT_WIDTH = 320;
    /**
     * The minimum swipe delta in px required to be counted as a swipe and not a touch / click
     */
    var SWIPE_THRESHOLD = 5;
    ;
    exports.SlidePaneBase = Themed_1.ThemedMixin(WidgetBase_1.WidgetBase);
    var SlidePane = /** @class */ (function (_super) {
        tslib_1.__extends(SlidePane, _super);
        function SlidePane() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._titleId = uuid_1.default();
            return _this;
        }
        Object.defineProperty(SlidePane.prototype, "plane", {
            get: function () {
                var _a = this.properties.align, align = _a === void 0 ? "left" /* left */ : _a;
                return align === "left" /* left */ || align === "right" /* right */ ? 0 /* x */ : 1 /* y */;
            },
            enumerable: true,
            configurable: true
        });
        SlidePane.prototype._getDelta = function (event, eventType) {
            var _a = this.properties.align, align = _a === void 0 ? "left" /* left */ : _a;
            if (this.plane === 0 /* x */) {
                var currentX = event.type === eventType ? event.changedTouches[0].screenX : event.pageX;
                return align === "right" /* right */ ? currentX - this._initialPosition : this._initialPosition - currentX;
            }
            else {
                var currentY = event.type === eventType ? event.changedTouches[0].screenY : event.pageY;
                return align === "bottom" /* bottom */ ? currentY - this._initialPosition : this._initialPosition - currentY;
            }
        };
        SlidePane.prototype._onCloseClick = function () {
            var onRequestClose = this.properties.onRequestClose;
            onRequestClose && onRequestClose();
        };
        SlidePane.prototype._onSwipeStart = function (event) {
            this._swiping = true;
            // Cache initial pointer position
            if (this.plane === 0 /* x */) {
                this._initialPosition = event.type === 'touchstart' ? event.changedTouches[0].screenX : event.pageX;
            }
            else {
                this._initialPosition = event.type === 'touchstart' ? event.changedTouches[0].screenY : event.pageY;
            }
            // Clear out the last transform applied
            this._transform = 0;
        };
        SlidePane.prototype._onSwipeMove = function (event) {
            // Ignore mouse movement when not clicking
            if (!this._swiping) {
                return;
            }
            var _a = this.properties, _b = _a.align, align = _b === void 0 ? "left" /* left */ : _b, _c = _a.width, width = _c === void 0 ? DEFAULT_WIDTH : _c;
            var delta = this._getDelta(event, 'touchmove');
            // Transform to apply
            this._transform = 100 * delta / width;
            // Prevent pane from sliding past screen edge
            if (delta <= 0) {
                return;
            }
            // Move the pane
            if (this.plane === 0 /* x */) {
                this._content.style.transform = "translateX(" + (align === "left" /* left */ ? '-' : '') + this._transform + "%)";
            }
            else {
                this._content.style.transform = "translateY(" + (align === "top" /* top */ ? '-' : '') + this._transform + "%)";
            }
        };
        SlidePane.prototype._onSwipeEnd = function (event) {
            this._swiping = false;
            var _a = this.properties, onRequestClose = _a.onRequestClose, _b = _a.width, width = _b === void 0 ? DEFAULT_WIDTH : _b;
            var delta = this._getDelta(event, 'touchend');
            // If the pane was swiped far enough to close
            if (delta > width / 2) {
                // Cache the transform to apply on next render
                this._transform = 100 * delta / width;
                onRequestClose && onRequestClose();
            }
            else if (Math.abs(delta) < SWIPE_THRESHOLD && (!this._content || !this._content.contains(event.target))) {
                onRequestClose && onRequestClose();
            }
            else if (delta > 0) {
                // Animate the pane back open
                this._slideIn = true;
                this.invalidate();
            }
        };
        SlidePane.prototype.onElementCreated = function (element, key) {
            if (key === 'content') {
                element.addEventListener('transitionend', this.invalidate.bind(this));
                this._content = element;
            }
        };
        SlidePane.prototype.getContent = function () {
            return d_1.v('div', { classes: this.theme(css.content) }, this.children);
        };
        SlidePane.prototype.getStyles = function () {
            var _a = this.properties, _b = _a.align, align = _b === void 0 ? "left" /* left */ : _b, _c = _a.open, open = _c === void 0 ? false : _c, _d = _a.width, width = _d === void 0 ? DEFAULT_WIDTH : _d;
            var translate = '';
            var translateAxis = this.plane === 0 /* x */ ? 'X' : 'Y';
            // If pane is closing because of swipe
            if (!open && this._wasOpen && this._transform) {
                translate = align === "left" /* left */ || align === "top" /* top */ ? "-" + this._transform : "" + this._transform;
            }
            return {
                transform: translate ? "translate" + translateAxis + "(" + translate + "%)" : '',
                width: this.plane === 0 /* x */ ? width + "px" : null,
                height: this.plane === 1 /* y */ ? width + "px" : null
            };
        };
        SlidePane.prototype.getFixedModifierClasses = function () {
            var _a = this.properties, _b = _a.align, align = _b === void 0 ? "left" /* left */ : _b, _c = _a.open, open = _c === void 0 ? false : _c;
            var alignCss = css;
            return [
                open ? css.openFixed : null,
                alignCss[align + "Fixed"],
                this._slideIn || (open && !this._wasOpen) ? css.slideInFixed : null,
                !open && this._wasOpen ? css.slideOutFixed : null
            ];
        };
        SlidePane.prototype.getModifierClasses = function () {
            var _a = this.properties, _b = _a.align, align = _b === void 0 ? "left" /* left */ : _b, _c = _a.open, open = _c === void 0 ? false : _c;
            var alignCss = css;
            return [
                alignCss[align],
                open ? css.open : null,
                this._slideIn || (open && !this._wasOpen) ? css.slideIn : null,
                !open && this._wasOpen ? css.slideOut : null
            ];
        };
        SlidePane.prototype.renderCloseIcon = function () {
            return d_1.v('i', { classes: this.theme([iconCss.icon, iconCss.closeIcon]),
                role: 'presentation', 'aria-hidden': 'true'
            });
        };
        SlidePane.prototype.renderTitle = function () {
            var _a = this.properties.title, title = _a === void 0 ? '' : _a;
            return d_1.v('div', { id: this._titleId }, [title]);
        };
        SlidePane.prototype.renderUnderlay = function () {
            var _a = this.properties.underlay, underlay = _a === void 0 ? false : _a;
            return d_1.v('div', {
                classes: [this.theme(underlay ? css.underlayVisible : null), css.underlay],
                enterAnimation: animations.fadeIn,
                exitAnimation: animations.fadeOut,
                key: 'underlay'
            });
        };
        SlidePane.prototype.render = function () {
            var _a = this.properties, _b = _a.closeText, closeText = _b === void 0 ? 'close pane' : _b, onOpen = _a.onOpen, _c = _a.open, open = _c === void 0 ? false : _c, _d = _a.title, title = _d === void 0 ? '' : _d;
            var contentStyles = this.getStyles();
            var contentClasses = this.getModifierClasses();
            var fixedContentClasses = this.getFixedModifierClasses();
            if (this._slideIn && this._content) {
                this._content.style.transform = '';
            }
            open && !this._wasOpen && onOpen && onOpen();
            this._wasOpen = open;
            this._slideIn = false;
            return d_1.v('div', {
                'aria-labelledby': this._titleId,
                classes: this.theme(css.root),
                onmousedown: this._onSwipeStart,
                onmousemove: this._onSwipeMove,
                onmouseup: this._onSwipeEnd,
                ontouchend: this._onSwipeEnd,
                ontouchmove: this._onSwipeMove,
                ontouchstart: this._onSwipeStart
            }, [
                open ? this.renderUnderlay() : null,
                d_1.v('div', {
                    key: 'content',
                    classes: tslib_1.__spread(this.theme(tslib_1.__spread([css.pane], contentClasses)), [css.paneFixed], fixedContentClasses),
                    styles: contentStyles
                }, [
                    title ? d_1.v('div', {
                        classes: this.theme(css.title),
                        key: 'title'
                    }, [
                        this.renderTitle(),
                        d_1.v('button', {
                            classes: this.theme(css.close),
                            onclick: this._onCloseClick
                        }, [
                            closeText,
                            this.renderCloseIcon()
                        ])
                    ]) : null,
                    this.getContent()
                ])
            ]);
        };
        SlidePane = tslib_1.__decorate([
            Themed_1.theme(css),
            Themed_1.theme(iconCss)
        ], SlidePane);
        return SlidePane;
    }(exports.SlidePaneBase));
    exports.default = SlidePane;
});
//# sourceMappingURL=SlidePane.js.map