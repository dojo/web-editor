(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/widget-core/mixins/Themed", "@dojo/widget-core/d", "@dojo/widget-core/WidgetBase", "./styles/tooltip.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var Themed_1 = require("@dojo/widget-core/mixins/Themed");
    var d_1 = require("@dojo/widget-core/d");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var css = require("./styles/tooltip.m.css");
    ;
    ;
    var orientationCss = css;
    exports.ThemedBase = Themed_1.ThemedMixin(WidgetBase_1.WidgetBase);
    var Tooltip = /** @class */ (function (_super) {
        tslib_1.__extends(Tooltip, _super);
        function Tooltip() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Tooltip.prototype.getFixedModifierClasses = function () {
            var _a = this.properties.orientation, orientation = _a === void 0 ? "right" /* right */ : _a;
            return [
                css.rootFixed,
                orientationCss[orientation + "Fixed"]
            ];
        };
        Tooltip.prototype.getModifierClasses = function () {
            var _a = this.properties.orientation, orientation = _a === void 0 ? "right" /* right */ : _a;
            return [
                orientationCss[orientation]
            ];
        };
        Tooltip.prototype.renderContent = function () {
            return d_1.v('div', {
                classes: [this.theme(css.content), css.contentFixed],
                key: 'content'
            }, [this.properties.content]);
        };
        Tooltip.prototype.renderTarget = function () {
            return d_1.v('div', { key: 'target' }, this.children);
        };
        Tooltip.prototype.render = function () {
            var open = this.properties.open;
            var classes = this.getModifierClasses();
            var fixedClasses = this.getFixedModifierClasses();
            return d_1.v('div', {
                classes: tslib_1.__spread(this.theme(classes), fixedClasses)
            }, [
                this.renderTarget(),
                open ? this.renderContent() : null
            ]);
        };
        Tooltip = tslib_1.__decorate([
            Themed_1.theme(css)
        ], Tooltip);
        return Tooltip;
    }(exports.ThemedBase));
    exports.default = Tooltip;
});
//# sourceMappingURL=Tooltip.js.map