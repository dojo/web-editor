{"version":3,"file":"Tooltip.js","sourceRoot":"","sources":["Tooltip.ts"],"names":[],"mappings":";;;;;;;;;;;;IACA,0DAAqE;IACrE,yCAAwC;IACxC,2DAA0D;IAE1D,4CAA8C;IAe7C,CAAC;IAQD,CAAC;IAEF,IAAM,cAAc,GAAyB,GAAG,CAAC;IAEpC,QAAA,UAAU,GAAG,oBAAW,CAAC,uBAAU,CAAC,CAAC;IAGlD;QAAqC,mCAA6B;QAAlE;;QAyCA,CAAC;QAxCU,yCAAuB,GAAjC;YACS,IAAA,gCAA+B,EAA/B,sDAA+B,CAAqB;YAE5D,MAAM,CAAC;gBACN,GAAG,CAAC,SAAS;gBACb,cAAc,CAAI,WAAW,UAAO,CAAC;aACrC,CAAC;QACH,CAAC;QAES,oCAAkB,GAA5B;YACS,IAAA,gCAA+B,EAA/B,sDAA+B,CAAqB;YAE5D,MAAM,CAAC;gBACN,cAAc,CAAC,WAAW,CAAC;aAC3B,CAAC;QACH,CAAC;QAES,+BAAa,GAAvB;YACC,MAAM,CAAC,KAAC,CAAC,KAAK,EAAE;gBACf,OAAO,EAAE,CAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,YAAY,CAAE;gBACtD,GAAG,EAAE,SAAS;aACd,EAAE,CAAE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAE,CAAC,CAAC;QACjC,CAAC;QAES,8BAAY,GAAtB;YACC,MAAM,CAAC,KAAC,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACnD,CAAC;QAED,wBAAM,GAAN;YACS,IAAA,2BAAI,CAAqB;YACjC,IAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1C,IAAM,YAAY,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAEpD,MAAM,CAAC,KAAC,CAAC,KAAK,EAAE;gBACf,OAAO,mBAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAK,YAAY,CAAE;aACpD,EAAE;gBACF,IAAI,CAAC,YAAY,EAAE;gBACnB,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,IAAI;aAClC,CAAC,CAAC;QACJ,CAAC;QAxCmB,OAAO;YAD3B,cAAK,CAAC,GAAG,CAAC;WACU,OAAO,CAyC3B;QAAD,cAAC;KAAA,AAzCD,CAAqC,kBAAU,GAyC9C;sBAzCoB,OAAO","sourcesContent":["import { DNode, WidgetProperties } from '@dojo/widget-core/interfaces';\nimport { ThemedMixin, theme } from '@dojo/widget-core/mixins/Themed';\nimport { v } from '@dojo/widget-core/d';\nimport { WidgetBase } from '@dojo/widget-core/WidgetBase';\n\nimport * as css from './styles/tooltip.m.css';\n\n/**\n * @type TooltipProperties\n *\n * Properties that can be set on Tooltip components\n *\n * @property content           Information to show within the tooltip\n * @property orientation       Where this tooltip should render relative to its child\n * @property open           Determines if this tooltip is visible\n */\nexport interface TooltipProperties extends WidgetProperties {\n\tcontent: DNode;\n\torientation?: Orientation;\n\topen?: boolean;\n};\n\n// Enum used to position the Tooltip\nexport const enum Orientation {\n\tbottom = 'bottom',\n\tleft = 'left',\n\tright = 'right',\n\ttop = 'top'\n};\n\nconst orientationCss: {[key: string]: any} = css;\n\nexport const ThemedBase = ThemedMixin(WidgetBase);\n\n@theme(css)\nexport default class Tooltip extends ThemedBase<TooltipProperties> {\n\tprotected getFixedModifierClasses(): (string | null)[] {\n\t\tconst { orientation = Orientation.right } = this.properties;\n\n\t\treturn [\n\t\t\tcss.rootFixed,\n\t\t\torientationCss[`${orientation}Fixed`]\n\t\t];\n\t}\n\n\tprotected getModifierClasses(): (string | null)[] {\n\t\tconst { orientation = Orientation.right } = this.properties;\n\n\t\treturn [\n\t\t\torientationCss[orientation]\n\t\t];\n\t}\n\n\tprotected renderContent(): DNode {\n\t\treturn v('div', {\n\t\t\tclasses: [ this.theme(css.content), css.contentFixed ],\n\t\t\tkey: 'content'\n\t\t}, [ this.properties.content ]);\n\t}\n\n\tprotected renderTarget(): DNode {\n\t\treturn v('div', { key: 'target' }, this.children);\n\t}\n\n\trender(): DNode {\n\t\tconst { open } = this.properties;\n\t\tconst classes = this.getModifierClasses();\n\t\tconst fixedClasses = this.getFixedModifierClasses();\n\n\t\treturn v('div', {\n\t\t\tclasses: [ ...this.theme(classes), ...fixedClasses ]\n\t\t}, [\n\t\t\tthis.renderTarget(),\n\t\t\topen ? this.renderContent() : null\n\t\t]);\n\t}\n}\n"]}