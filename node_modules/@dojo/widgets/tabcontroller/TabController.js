(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/core/lang", "@dojo/widget-core/mixins/Themed", "@dojo/widget-core/d", "@dojo/widget-core/WidgetBase", "./TabButton", "@dojo/core/uuid", "./styles/tabController.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var lang_1 = require("@dojo/core/lang");
    var Themed_1 = require("@dojo/widget-core/mixins/Themed");
    var d_1 = require("@dojo/widget-core/d");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var TabButton_1 = require("./TabButton");
    var uuid_1 = require("@dojo/core/uuid");
    var css = require("./styles/tabController.m.css");
    ;
    ;
    exports.TabControllerBase = Themed_1.ThemedMixin(WidgetBase_1.WidgetBase);
    var TabController = /** @class */ (function (_super) {
        tslib_1.__extends(TabController, _super);
        function TabController() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._id = uuid_1.default();
            _this._callTabFocus = false;
            return _this;
        }
        Object.defineProperty(TabController.prototype, "_tabs", {
            get: function () {
                return this.children.filter(function (child) { return child !== null; });
            },
            enumerable: true,
            configurable: true
        });
        TabController.prototype._onDownArrowPress = function () {
            var alignButtons = this.properties.alignButtons;
            if (alignButtons === 1 /* left */ || alignButtons === 2 /* right */) {
                this.selectNextIndex();
            }
        };
        TabController.prototype._onLeftArrowPress = function () {
            this.selectPreviousIndex();
        };
        TabController.prototype._onRightArrowPress = function () {
            this.selectNextIndex();
        };
        TabController.prototype._onUpArrowPress = function () {
            var alignButtons = this.properties.alignButtons;
            if (alignButtons === 1 /* left */ || alignButtons === 2 /* right */) {
                this.selectPreviousIndex();
            }
        };
        /**
         * Determines if the tab at `currentIndex` is enabled. If disabled,
         * returns the next valid index, or null if no enabled tabs exist.
         */
        TabController.prototype._validateIndex = function (currentIndex, backwards) {
            var tabs = this._tabs;
            if (tabs.every(function (result) { return Boolean(result.properties.disabled); })) {
                return null;
            }
            function nextIndex(index) {
                if (backwards) {
                    return (tabs.length + (index - 1)) % tabs.length;
                }
                return (index + 1) % tabs.length;
            }
            var i = !tabs[currentIndex] ? tabs.length - 1 : currentIndex;
            while (tabs[i].properties.disabled) {
                i = nextIndex(i);
            }
            return i;
        };
        TabController.prototype.closeIndex = function (index) {
            var onRequestTabClose = this.properties.onRequestTabClose;
            var key = this._tabs[index].properties.key;
            this._callTabFocus = true;
            onRequestTabClose && onRequestTabClose(index, key);
        };
        TabController.prototype.renderButtonContent = function (label) {
            return [label || null];
        };
        TabController.prototype.renderTabButtons = function () {
            var _this = this;
            return this._tabs.map(function (tab, i) {
                var _a = tab.properties, closeable = _a.closeable, disabled = _a.disabled, key = _a.key, label = _a.label, _b = _a.theme, theme = _b === void 0 ? {} : _b;
                return d_1.w(TabButton_1.default, {
                    callFocus: _this._callTabFocus && i === _this.properties.activeIndex,
                    active: i === _this.properties.activeIndex,
                    closeable: closeable,
                    controls: _this._id + "-tab-" + i,
                    disabled: disabled,
                    id: _this._id + "-tabbutton-" + i,
                    index: i,
                    key: key + "-tabbutton",
                    onClick: _this.selectIndex,
                    onCloseClick: _this.closeIndex,
                    onDownArrowPress: _this._onDownArrowPress,
                    onEndPress: _this.selectLastIndex,
                    onFocusCalled: function () { _this._callTabFocus = false; },
                    onHomePress: _this.selectFirstIndex,
                    onLeftArrowPress: _this._onLeftArrowPress,
                    onRightArrowPress: _this._onRightArrowPress,
                    onUpArrowPress: _this._onUpArrowPress,
                    theme: theme
                }, _this.renderButtonContent(label));
            });
        };
        TabController.prototype.renderTabs = function () {
            var _this = this;
            var activeIndex = this.properties.activeIndex;
            return this._tabs
                .filter(function (tab, i) {
                return i === activeIndex && tab.children.length;
            })
                .map(function (tab, i) {
                lang_1.assign(tab.properties, {
                    id: _this._id + "-tab-" + i,
                    labelledBy: _this._id + "-tabbutton-" + i
                });
                return tab;
            });
        };
        TabController.prototype.selectFirstIndex = function () {
            this.selectIndex(0, true);
        };
        TabController.prototype.selectIndex = function (index, backwards) {
            var _a = this.properties, activeIndex = _a.activeIndex, onRequestTabChange = _a.onRequestTabChange;
            var validIndex = this._validateIndex(index, backwards);
            this._callTabFocus = true;
            if (validIndex !== null && validIndex !== activeIndex) {
                var key = this._tabs[validIndex].properties.key;
                onRequestTabChange && onRequestTabChange(validIndex, key);
            }
        };
        TabController.prototype.selectLastIndex = function () {
            this.selectIndex(this._tabs.length - 1);
        };
        TabController.prototype.selectNextIndex = function () {
            var activeIndex = this.properties.activeIndex;
            this.selectIndex(activeIndex === this._tabs.length - 1 ? 0 : activeIndex + 1);
        };
        TabController.prototype.selectPreviousIndex = function () {
            var activeIndex = this.properties.activeIndex;
            this.selectIndex(activeIndex === 0 ? this._tabs.length - 1 : activeIndex - 1, true);
        };
        TabController.prototype.render = function () {
            var activeIndex = this.properties.activeIndex;
            var validIndex = this._validateIndex(activeIndex);
            var tabs = this.renderTabs();
            if (validIndex !== null && validIndex !== activeIndex) {
                this.selectIndex(validIndex);
                return null;
            }
            var children = [
                d_1.v('div', {
                    key: 'buttons',
                    classes: this.theme(css.tabButtons)
                }, this.renderTabButtons()),
                tabs.length ? d_1.v('div', {
                    key: 'tabs',
                    classes: this.theme(css.tabs)
                }, tabs) : null
            ];
            var alignClass;
            var orientation = 'horizontal';
            switch (this.properties.alignButtons) {
                case 2 /* right */:
                    alignClass = css.alignRight;
                    orientation = 'vertical';
                    children.reverse();
                    break;
                case 0 /* bottom */:
                    alignClass = css.alignBottom;
                    children.reverse();
                    break;
                case 1 /* left */:
                    alignClass = css.alignLeft;
                    orientation = 'vertical';
                    break;
            }
            return d_1.v('div', {
                'aria-orientation': orientation,
                classes: this.theme([
                    alignClass ? alignClass : null,
                    css.root
                ]),
                role: 'tablist'
            }, children);
        };
        TabController = tslib_1.__decorate([
            Themed_1.theme(css)
        ], TabController);
        return TabController;
    }(exports.TabControllerBase));
    exports.default = TabController;
});
//# sourceMappingURL=TabController.js.map