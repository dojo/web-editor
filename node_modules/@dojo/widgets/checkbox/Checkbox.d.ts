import { WidgetBase } from '@dojo/widget-core/WidgetBase';
import { DNode } from '@dojo/widget-core/interfaces';
import { ThemedMixin, ThemedProperties } from '@dojo/widget-core/mixins/Themed';
import { LabelOptions } from '../label/Label';
/**
 * @type CheckboxProperties
 *
 * Properties that can be set on a Checkbox component
 *
 * @property checked        Checked/unchecked property of the radio
 * @property describedBy    ID of an element that provides more descriptive text
 * @property disabled       Prevents the user from interacting with the form field
 * @property invalid        Indicates the valid is invalid, or required and not filled in
 * @property label          Label settings for form label text, position, and visibility
 * @property mode           The type of user interface to show for this Checkbox
 * @property name           The form widget's name
 * @property offLabel       Label to show in the "off" positin of a toggle
 * @property onLabel        Label to show in the "on" positin of a toggle
 * @property readOnly       Allows or prevents user interaction
 * @property required       Whether or not a value is required
 * @property value          The current value
 * @property onBlur         Called when the input loses focus
 * @property onChange       Called when the node's 'change' event is fired
 * @property onClick        Called when the input is clicked
 * @property onFocus        Called when the input is focused
 * @property onMouseDown    Called on the input's mousedown event
 * @property onMouseUp      Called on the input's mouseup event
 * @property onTouchStart   Called on the input's touchstart event
 * @property onTouchEnd     Called on the input's touchend event
 * @property onTouchCancel  Called on the input's touchcancel event
 */
export interface CheckboxProperties extends ThemedProperties {
    checked?: boolean;
    describedBy?: string;
    disabled?: boolean;
    invalid?: boolean;
    label?: string | LabelOptions;
    mode?: Mode;
    name?: string;
    offLabel?: DNode;
    onLabel?: DNode;
    readOnly?: boolean;
    required?: boolean;
    value?: string;
    onBlur?(event: FocusEvent): void;
    onChange?(event: Event): void;
    onClick?(event: MouseEvent): void;
    onFocus?(event: FocusEvent): void;
    onMouseDown?(event: MouseEvent): void;
    onMouseUp?(event: MouseEvent): void;
    onTouchStart?(event: TouchEvent): void;
    onTouchEnd?(event: TouchEvent): void;
    onTouchCancel?(event: TouchEvent): void;
}
/**
 * The type of UI to show for this Checkbox
 */
export declare const enum Mode {
    normal = 0,
    toggle = 1,
}
export declare const CheckboxBase: (new (...args: any[]) => ThemedMixin<{}>) & typeof WidgetBase;
export default class Checkbox extends CheckboxBase<CheckboxProperties> {
    private _focused;
    private _onBlur(event);
    private _onChange(event);
    private _onClick(event);
    private _onFocus(event);
    private _onMouseDown(event);
    private _onMouseUp(event);
    private _onTouchStart(event);
    private _onTouchEnd(event);
    private _onTouchCancel(event);
    protected getModifierClasses(): (string | null)[];
    protected renderToggle(): DNode[];
    protected render(): DNode;
}
