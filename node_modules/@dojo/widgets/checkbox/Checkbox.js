(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/widget-core/WidgetBase", "@dojo/widget-core/mixins/Themed", "../label/Label", "@dojo/widget-core/d", "./styles/checkbox.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var Themed_1 = require("@dojo/widget-core/mixins/Themed");
    var Label_1 = require("../label/Label");
    var d_1 = require("@dojo/widget-core/d");
    var css = require("./styles/checkbox.m.css");
    ;
    exports.CheckboxBase = Themed_1.ThemedMixin(WidgetBase_1.WidgetBase);
    var Checkbox = /** @class */ (function (_super) {
        tslib_1.__extends(Checkbox, _super);
        function Checkbox() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._focused = false;
            return _this;
        }
        Checkbox.prototype._onBlur = function (event) {
            this._focused = false;
            this.properties.onBlur && this.properties.onBlur(event);
            this.invalidate();
        };
        Checkbox.prototype._onChange = function (event) { this.properties.onChange && this.properties.onChange(event); };
        Checkbox.prototype._onClick = function (event) { this.properties.onClick && this.properties.onClick(event); };
        Checkbox.prototype._onFocus = function (event) {
            this._focused = true;
            this.properties.onFocus && this.properties.onFocus(event);
            this.invalidate();
        };
        Checkbox.prototype._onMouseDown = function (event) { this.properties.onMouseDown && this.properties.onMouseDown(event); };
        Checkbox.prototype._onMouseUp = function (event) { this.properties.onMouseUp && this.properties.onMouseUp(event); };
        Checkbox.prototype._onTouchStart = function (event) { this.properties.onTouchStart && this.properties.onTouchStart(event); };
        Checkbox.prototype._onTouchEnd = function (event) { this.properties.onTouchEnd && this.properties.onTouchEnd(event); };
        Checkbox.prototype._onTouchCancel = function (event) { this.properties.onTouchCancel && this.properties.onTouchCancel(event); };
        Checkbox.prototype.getModifierClasses = function () {
            var _a = this.properties, _b = _a.checked, checked = _b === void 0 ? false : _b, disabled = _a.disabled, invalid = _a.invalid, mode = _a.mode, readOnly = _a.readOnly, required = _a.required;
            return [
                mode === 1 /* toggle */ ? css.toggle : null,
                checked ? css.checked : null,
                disabled ? css.disabled : null,
                this._focused ? css.focused : null,
                invalid ? css.invalid : null,
                invalid === false ? css.valid : null,
                readOnly ? css.readonly : null,
                required ? css.required : null
            ];
        };
        Checkbox.prototype.renderToggle = function () {
            var _a = this.properties, checked = _a.checked, mode = _a.mode, onLabel = _a.onLabel, offLabel = _a.offLabel;
            return mode === 1 /* toggle */ ? [
                offLabel ? d_1.v('div', {
                    key: 'offLabel',
                    classes: this.theme(css.offLabel),
                    'aria-hidden': checked ? 'true' : null
                }, [offLabel]) : null,
                d_1.v('div', {
                    key: 'toggle',
                    classes: this.theme(css.toggleSwitch)
                }),
                onLabel ? d_1.v('div', {
                    key: 'onLabel',
                    classes: this.theme(css.onLabel),
                    'aria-hidden': checked ? null : 'true'
                }, [onLabel]) : null
            ] : [];
        };
        Checkbox.prototype.render = function () {
            var _a = this.properties, _b = _a.checked, checked = _b === void 0 ? false : _b, describedBy = _a.describedBy, disabled = _a.disabled, invalid = _a.invalid, label = _a.label, name = _a.name, readOnly = _a.readOnly, required = _a.required, value = _a.value;
            var children = [
                d_1.v('div', { classes: this.theme(css.inputWrapper) }, tslib_1.__spread(this.renderToggle(), [
                    d_1.v('input', {
                        classes: this.theme(css.input),
                        checked: checked,
                        'aria-describedby': describedBy,
                        disabled: disabled,
                        'aria-invalid': invalid ? 'true' : null,
                        name: name,
                        readOnly: readOnly,
                        'aria-readonly': readOnly ? 'true' : null,
                        required: required,
                        type: 'checkbox',
                        value: value,
                        onblur: this._onBlur,
                        onchange: this._onChange,
                        onclick: this._onClick,
                        onfocus: this._onFocus,
                        onmousedown: this._onMouseDown,
                        onmouseup: this._onMouseUp,
                        ontouchstart: this._onTouchStart,
                        ontouchend: this._onTouchEnd,
                        ontouchcancel: this._onTouchCancel
                    })
                ]))
            ];
            var checkboxWidget;
            if (label) {
                checkboxWidget = d_1.w(Label_1.default, {
                    extraClasses: { root: Label_1.parseLabelClasses(this.theme(tslib_1.__spread([css.root], this.getModifierClasses()))) },
                    label: label,
                    theme: this.properties.theme
                }, children);
            }
            else {
                checkboxWidget = d_1.v('div', {
                    classes: this.theme(tslib_1.__spread([css.root], this.getModifierClasses()))
                }, children);
            }
            return checkboxWidget;
        };
        Checkbox = tslib_1.__decorate([
            Themed_1.theme(css)
        ], Checkbox);
        return Checkbox;
    }(exports.CheckboxBase));
    exports.default = Checkbox;
});
//# sourceMappingURL=Checkbox.js.map