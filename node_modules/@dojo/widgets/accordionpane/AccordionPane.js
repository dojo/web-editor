(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/core/aspect", "@dojo/core/lang", "@dojo/shim/array", "@dojo/widget-core/mixins/Themed", "@dojo/widget-core/d", "@dojo/widget-core/WidgetBase", "./styles/accordionPane.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var aspect_1 = require("@dojo/core/aspect");
    var lang_1 = require("@dojo/core/lang");
    var array_1 = require("@dojo/shim/array");
    var Themed_1 = require("@dojo/widget-core/mixins/Themed");
    var d_1 = require("@dojo/widget-core/d");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var css = require("./styles/accordionPane.m.css");
    ;
    exports.AccordionPaneBase = Themed_1.ThemedMixin(WidgetBase_1.WidgetBase);
    var AccordionPane = /** @class */ (function (_super) {
        tslib_1.__extends(AccordionPane, _super);
        function AccordionPane() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AccordionPane.prototype._assignCallback = function (child, functionName, callback) {
            var _this = this;
            var existingProperty = child.properties[functionName];
            var property = function () { callback.call(_this, "" + child.properties.key); };
            return existingProperty ? aspect_1.after(existingProperty, property) : property;
        };
        AccordionPane.prototype.onRequestClose = function (key) {
            var onRequestClose = this.properties.onRequestClose;
            onRequestClose && onRequestClose(key);
        };
        AccordionPane.prototype.onRequestOpen = function (key) {
            var onRequestOpen = this.properties.onRequestOpen;
            onRequestOpen && onRequestOpen(key);
        };
        AccordionPane.prototype.renderChildren = function () {
            var _this = this;
            var _a = this.properties, _b = _a.openKeys, openKeys = _b === void 0 ? [] : _b, theme = _a.theme;
            return this.children.filter(function (child) { return child; }).map(function (child) {
                // null checks skipped since children are filtered prior to mapping
                lang_1.assign(child.properties, {
                    onRequestClose: _this._assignCallback(child, 'onRequestClose', _this.onRequestClose),
                    onRequestOpen: _this._assignCallback(child, 'onRequestOpen', _this.onRequestOpen),
                    open: array_1.includes(openKeys, child.properties.key),
                    theme: theme
                });
                return child;
            });
        };
        AccordionPane.prototype.render = function () {
            return d_1.v('div', { classes: this.theme(css.root) }, this.renderChildren());
        };
        AccordionPane = tslib_1.__decorate([
            Themed_1.theme(css)
        ], AccordionPane);
        return AccordionPane;
    }(exports.AccordionPaneBase));
    exports.default = AccordionPane;
});
//# sourceMappingURL=AccordionPane.js.map