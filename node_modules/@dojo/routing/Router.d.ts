import Task from '@dojo/core/async/Task';
import Evented from '@dojo/core/Evented';
import { PausableHandle } from '@dojo/core/on';
import { Context, DispatchResult, LinkParams, OutletContext, Parameters, RouteConfig, RouteInterface, RouterEvents, RouterInterface, RouterOptions, StartOptions } from './interfaces';
export declare const errorOutlet = "errorOutlet";
export declare class Router<C extends Context> extends Evented implements RouterInterface<C> {
    private _contextFactory;
    private _currentSelection;
    private _dispatchFromStart;
    private _fallback?;
    private _history?;
    private _routes;
    private _started?;
    private _outletContextMap;
    private _outletRouteMap;
    private _currentParams;
    private _defaultParams;
    private _defaultRoute;
    on: RouterEvents<C>;
    constructor(options?: RouterOptions<C>);
    register(config: RouteConfig[], from?: string | RouterInterface<any> | RouteInterface<any, any>): void;
    append(add: RouteInterface<Context, Parameters> | RouteInterface<Context, Parameters>[]): void;
    private _dispatch(context, path, canceled?, emit?);
    dispatch(context: Context, path: string): Task<DispatchResult>;
    link(routeOrOutlet: RouteInterface<Context, Parameters> | string, params?: LinkParams): string;
    replacePath(path: string): void;
    setPath(path: string): void;
    hasOutlet(outletId: string): boolean;
    getOutlet(outletId: string | string[]): OutletContext | undefined;
    getCurrentParams(): Parameters;
    start(startOptions?: StartOptions): PausableHandle;
}
export default Router;
