(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/shim/global", "@dojo/core/on", "./HistoryBase"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var global_1 = require("@dojo/shim/global");
    var on_1 = require("@dojo/core/on");
    var HistoryBase_1 = require("./HistoryBase");
    var HashHistory = /** @class */ (function (_super) {
        tslib_1.__extends(HashHistory, _super);
        function HashHistory(_a) {
            var window = (_a === void 0 ? { window: global_1.default } : _a).window;
            var _this = _super.call(this, {}) || this;
            var browserLocation = window.location;
            _this._current = browserLocation.hash.slice(1);
            _this._browserLocation = browserLocation;
            _this.own(on_1.default(window, 'hashchange', function () {
                var path = _this.normalizePath(browserLocation.hash);
                // Ignore hashchange for the current path. Guards against browsers firing hashchange when the history
                // manager sets the hash.
                if (path !== _this._current) {
                    _this._current = path;
                    _this.emit({
                        type: 'change',
                        value: path
                    });
                }
            }));
            return _this;
        }
        Object.defineProperty(HashHistory.prototype, "current", {
            get: function () {
                return this._current;
            },
            enumerable: true,
            configurable: true
        });
        HashHistory.prototype.prefix = function (path) {
            if (path[0] !== '#') {
                return "#" + path;
            }
            return path;
        };
        HashHistory.prototype.normalizePath = function (path) {
            if (path[0] === '#') {
                path = path.slice(1);
            }
            return path;
        };
        HashHistory.prototype.set = function (path) {
            path = this.normalizePath(path);
            if (this._current === path) {
                return;
            }
            this._current = path;
            this._browserLocation.hash = this.prefix(path);
            this.emit({
                type: 'change',
                value: path
            });
        };
        HashHistory.prototype.replace = function (path) {
            path = this.normalizePath(path);
            if (this._current === path) {
                return;
            }
            this._current = path;
            var _a = this._browserLocation, pathname = _a.pathname, search = _a.search;
            this._browserLocation.replace(pathname + search + this.prefix(path));
            this.emit({
                type: 'change',
                value: path
            });
        };
        return HashHistory;
    }(HistoryBase_1.HistoryBase));
    exports.HashHistory = HashHistory;
    exports.default = HashHistory;
});
//# sourceMappingURL=HashHistory.js.map