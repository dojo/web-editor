{"version":3,"file":"HashHistory.js","sourceRoot":"","sources":["HashHistory.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,4CAAuC;IACvC,oCAA+B;IAC/B,6CAA4C;IAe5C;QAAiC,uCAAW;QAQ3C,qBAAY,EAAmD;gBAAjD,mEAAM;YAApB,YACC,kBAAM,EAAE,CAAC,SAoBT;YAlBQ,IAAA,iCAAyB,CAAY;YAE7C,KAAI,CAAC,QAAQ,GAAG,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9C,KAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;YAExC,KAAI,CAAC,GAAG,CAAC,YAAE,CAAC,MAAM,EAAE,YAAY,EAAE;gBACjC,IAAM,IAAI,GAAG,KAAI,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;gBAEtD,qGAAqG;gBACrG,yBAAyB;gBACzB,EAAE,CAAC,CAAC,IAAI,KAAK,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC5B,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACrB,KAAI,CAAC,IAAI,CAAC;wBACT,IAAI,EAAE,QAAQ;wBACd,KAAK,EAAE,IAAI;qBACX,CAAC,CAAC;gBACJ,CAAC;YACF,CAAC,CAAC,CAAC,CAAC;;QACL,CAAC;QAzBD,sBAAI,gCAAO;iBAAX;gBACC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACtB,CAAC;;;WAAA;QAyBM,4BAAM,GAAb,UAAc,IAAY;YACzB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,MAAI,IAAM,CAAC;YACnB,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAEM,mCAAa,GAApB,UAAqB,IAAY;YAChC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBACrB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAED,yBAAG,GAAH,UAAI,IAAY;YACf,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAChC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC5B,MAAM,CAAC;YACR,CAAC;YAED,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC/C,IAAI,CAAC,IAAI,CAAC;gBACT,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,IAAI;aACX,CAAC,CAAC;QACJ,CAAC;QAED,6BAAO,GAAP,UAAQ,IAAY;YACnB,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAChC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC5B,MAAM,CAAC;YACR,CAAC;YAED,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YAEf,IAAA,0BAA4C,EAA1C,sBAAQ,EAAE,kBAAM,CAA2B;YACnD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,GAAG,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YAErE,IAAI,CAAC,IAAI,CAAC;gBACT,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,IAAI;aACX,CAAC,CAAC;QACJ,CAAC;QACF,kBAAC;IAAD,CAAC,AA3ED,CAAiC,yBAAW,GA2E3C;IA3EY,kCAAW;IA6ExB,kBAAe,WAAW,CAAC","sourcesContent":["import global from '@dojo/shim/global';\nimport on from '@dojo/core/on';\nimport { HistoryBase } from './HistoryBase';\nimport { History, HistoryOptions } from './interfaces';\n\n/**\n * Options for creating HashHistory instances.\n */\nexport interface HashHistoryOptions extends HistoryOptions {\n\t/**\n\t * A DOM window object. HashHistory uses the `location` property and\n\t * listens to `hashchange` events. The current value is initialized to the\n\t * initial hash.\n\t */\n\twindow: Window;\n}\n\nexport class HashHistory extends HistoryBase implements History {\n\tprivate _current: string;\n\tprivate _browserLocation: Location;\n\n\tget current() {\n\t\treturn this._current;\n\t}\n\n\tconstructor({ window }: HashHistoryOptions = { window: global }) {\n\t\tsuper({});\n\n\t\tconst { location: browserLocation } = window;\n\n\t\tthis._current = browserLocation.hash.slice(1);\n\t\tthis._browserLocation = browserLocation;\n\n\t\tthis.own(on(window, 'hashchange', () => {\n\t\t\tconst path = this.normalizePath(browserLocation.hash);\n\n\t\t\t// Ignore hashchange for the current path. Guards against browsers firing hashchange when the history\n\t\t\t// manager sets the hash.\n\t\t\tif (path !== this._current) {\n\t\t\t\tthis._current = path;\n\t\t\t\tthis.emit({\n\t\t\t\t\ttype: 'change',\n\t\t\t\t\tvalue: path\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic prefix(path: string) {\n\t\tif (path[0] !== '#') {\n\t\t\treturn `#${path}`;\n\t\t}\n\t\treturn path;\n\t}\n\n\tpublic normalizePath(path: string): string {\n\t\tif (path[0] === '#') {\n\t\t\tpath = path.slice(1);\n\t\t}\n\t\treturn path;\n\t}\n\n\tset(path: string) {\n\t\tpath = this.normalizePath(path);\n\t\tif (this._current === path) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._current = path;\n\t\tthis._browserLocation.hash = this.prefix(path);\n\t\tthis.emit({\n\t\t\ttype: 'change',\n\t\t\tvalue: path\n\t\t});\n\t}\n\n\treplace(path: string) {\n\t\tpath = this.normalizePath(path);\n\t\tif (this._current === path) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._current = path;\n\n\t\tconst { pathname, search } = this._browserLocation;\n\t\tthis._browserLocation.replace(pathname + search + this.prefix(path));\n\n\t\tthis.emit({\n\t\t\ttype: 'change',\n\t\t\tvalue: path\n\t\t});\n\t}\n}\n\nexport default HashHistory;\n"]}