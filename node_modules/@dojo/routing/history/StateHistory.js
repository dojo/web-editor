(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/shim/global", "@dojo/core/on", "./HistoryBase"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var global_1 = require("@dojo/shim/global");
    var on_1 = require("@dojo/core/on");
    var HistoryBase_1 = require("./HistoryBase");
    /**
     * A browser-based history manager that uses the history object to store the current value.
     *
     * This manager ensures the current value always starts with a slash.
     */
    var StateHistory = /** @class */ (function (_super) {
        tslib_1.__extends(StateHistory, _super);
        function StateHistory(_a) {
            var _b = _a === void 0 ? { window: global_1.default } : _a, _c = _b.base, base = _c === void 0 ? '/' : _c, window = _b.window;
            var _this = _super.call(this, {}) || this;
            if (base !== '/') {
                if (/#/.test(base)) {
                    throw new TypeError('base must not contain \'#\'');
                }
                if (/\?/.test(base)) {
                    throw new TypeError('base must not contain \'?\'');
                }
            }
            var browserHistory = window.history, location = window.location;
            _this._base = base;
            _this._current = stripBase(base, location.pathname + location.search);
            _this._browserHistory = browserHistory;
            _this.own(on_1.default(window, 'popstate', function () {
                var path = stripBase(base, location.pathname + location.search);
                // Ignore popstate for the current path. Guards against browsers firing
                // popstate on page load, see
                // <https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate>.
                if (path !== _this._current) {
                    _this._current = path;
                    _this.emit({
                        type: 'change',
                        value: path
                    });
                }
            }));
            return _this;
        }
        Object.defineProperty(StateHistory.prototype, "current", {
            get: function () {
                return this._current;
            },
            enumerable: true,
            configurable: true
        });
        StateHistory.prototype.prefix = function (path) {
            var baseEndsWithSlash = /\/$/.test(this._base);
            var pathStartsWithSlash = /^\//.test(path);
            if (baseEndsWithSlash && pathStartsWithSlash) {
                return this._base + path.slice(1);
            }
            else if (!baseEndsWithSlash && !pathStartsWithSlash) {
                return this._base + "/" + path;
            }
            else {
                return this._base + path;
            }
        };
        StateHistory.prototype.set = function (path) {
            var value = ensureLeadingSlash(path);
            if (this._current === value) {
                return;
            }
            this._current = value;
            this._browserHistory.pushState({}, '', this.prefix(path));
            this.emit({ type: 'change', value: value });
        };
        StateHistory.prototype.replace = function (path) {
            var value = ensureLeadingSlash(path);
            if (this._current === value) {
                return;
            }
            this._current = value;
            this._browserHistory.replaceState({}, '', this.prefix(path));
            this.emit({ type: 'change', value: value });
        };
        return StateHistory;
    }(HistoryBase_1.HistoryBase));
    exports.StateHistory = StateHistory;
    function stripBase(base, path) {
        if (base === '/') {
            return path;
        }
        if (path.indexOf(base) === 0) {
            return ensureLeadingSlash(path.slice(base.length));
        }
        else {
            return '/';
        }
    }
    function ensureLeadingSlash(path) {
        return /^\//.test(path) ? path : "/" + path;
    }
    exports.default = StateHistory;
});
//# sourceMappingURL=StateHistory.js.map