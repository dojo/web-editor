{"version":3,"file":"RegistryHandler.js","sourceRoot":"","sources":["RegistryHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { Map } from '@dojo/shim/Map';\nimport { Evented } from '@dojo/core/Evented';\nimport { Constructor, RegistryLabel, WidgetBaseInterface } from './interfaces';\nimport { Registry, RegistryEventObject, RegistryItem } from './Registry';\nimport { Injector } from './Injector';\n\nexport class RegistryHandler extends Evented {\n\tprivate _registry = new Registry();\n\tprivate _baseRegistry: Registry;\n\tprivate _registryWidgetLabelMap: Map<Registry, RegistryLabel[]> = new Map();\n\tprivate _registryInjectorLabelMap: Map<Registry, RegistryLabel[]> = new Map();\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.own(this._registry);\n\t}\n\n\tpublic set base(baseRegistry: Registry) {\n\t\tthis._registryWidgetLabelMap.delete(this._baseRegistry);\n\t\tthis._registryInjectorLabelMap.delete(this._baseRegistry);\n\t\tthis._baseRegistry = baseRegistry;\n\t}\n\n\tpublic define(label: RegistryLabel, widget: RegistryItem): void {\n\t\tthis._registry.define(label, widget);\n\t}\n\n\tpublic defineInjector(label: RegistryLabel, injector: Injector): void {\n\t\tthis._registry.defineInjector(label, injector);\n\t}\n\n\tpublic has(label: RegistryLabel): boolean {\n\t\treturn this._registry.has(label) || this._baseRegistry.has(label);\n\t}\n\n\tpublic hasInjector(label: RegistryLabel): boolean {\n\t\treturn this._registry.hasInjector(label) || this._baseRegistry.hasInjector(label);\n\t}\n\n\tpublic get<T extends WidgetBaseInterface = WidgetBaseInterface>(label: RegistryLabel, globalPrecedence: boolean = false): Constructor<T> | null {\n\t\treturn this._get(label, globalPrecedence, 'get', this._registryWidgetLabelMap);\n\t}\n\n\tpublic getInjector<T extends Injector>(label: RegistryLabel, globalPrecedence: boolean = false): T | null {\n\t\treturn this._get(label, globalPrecedence, 'getInjector', this._registryInjectorLabelMap);\n\t}\n\n\tprivate _get(label: RegistryLabel, globalPrecedence: boolean, getFunctionName: 'getInjector' | 'get', labelMap: Map<Registry, RegistryLabel[]>): any {\n\t\tconst registries = globalPrecedence ? [ this._baseRegistry, this._registry ] : [ this._registry, this._baseRegistry ];\n\t\tfor (let i = 0; i < registries.length; i++) {\n\t\t\tconst registry: any = registries[i];\n\t\t\tif (!registry) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst item = registry[getFunctionName](label);\n\t\t\tconst registeredLabels = labelMap.get(registry) || [];\n\t\t\tif (item) {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t\telse if (registeredLabels.indexOf(label) === -1) {\n\t\t\t\tconst handle = registry.on(label, (event: RegistryEventObject) => {\n\t\t\t\t\tif (event.action === 'loaded' && (this as any)[getFunctionName](label, globalPrecedence) === event.item) {\n\t\t\t\t\t\tthis.emit({ type: 'invalidate' });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis.own(handle);\n\t\t\t\tlabelMap.set(registry, [ ...registeredLabels, label]);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n\nexport default RegistryHandler;\n"]}