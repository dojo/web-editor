{"version":3,"file":"d.js","sourceRoot":"","sources":["d.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,4CAAuC;IAavC;;OAEG;IACU,QAAA,KAAK,GAAG,gBAAM,CAAC,yBAAyB,CAAC,CAAC;IAEvD;;OAEG;IACU,QAAA,KAAK,GAAG,gBAAM,CAAC,yBAAyB,CAAC,CAAC;IAEvD;;OAEG;IACH,iBAAoF,KAAe;QAClG,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,aAAK,CAAC,CAAC;IAC9E,CAAC;IAFD,0BAEC;IAED;;OAEG;IACH,iBAAwB,KAAY;QACnC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,aAAK,CAAC,CAAC;IAC9E,CAAC;IAFD,0BAEC;IAaD,kBAAyB,MAAuB,EAAE,QAAgC,EAAE,SAAqC;QACxH,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,kBAAM,MAAM,EAAG,CAAC,CAAC,CAAE,MAAM,CAAE,CAAC;QAC/D,OAAO,KAAK,CAAC,MAAM,EAAE,CAAC;YACrB,IAAM,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;YACzB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACV,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACnC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAChB,CAAC;gBACD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACvD,KAAK,oBAAQ,KAAK,EAAK,IAAI,CAAC,QAAQ,CAAE,CAAC;gBACxC,CAAC;YACF,CAAC;QACF,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;IAdD,4BAcC;IAED;;OAEG;IACH,WAAiD,iBAAiD,EAAE,UAA2B,EAAE,QAA4B;QAA5B,yBAAA,EAAA,aAA4B;QAE5J,MAAM,CAAC;YACN,QAAQ,UAAA;YACR,iBAAiB,mBAAA;YACjB,UAAU,YAAA;YACV,IAAI,EAAE,aAAK;SACX,CAAC;IACH,CAAC;IARD,cAQC;IAQD,WAAkB,GAAW,EAAE,oBAAqF,EAAE,QAAyC;QAAhI,qCAAA,EAAA,yBAAqF;QAAE,yBAAA,EAAA,oBAAyC;QAC7J,IAAI,UAAU,GAAqD,oBAAoB,CAAC;QACxF,IAAI,0BAA0B,CAAC;QAE/B,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;YACzC,QAAQ,GAAG,oBAAoB,CAAC;YAChC,UAAU,GAAG,EAAE,CAAC;QACjB,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,UAAU,KAAK,UAAU,CAAC,CAAC,CAAC;YACtC,0BAA0B,GAAG,UAAU,CAAC;YACxC,UAAU,GAAG,EAAE,CAAC;QACjB,CAAC;QAED,MAAM,CAAC;YACN,GAAG,KAAA;YACH,0BAA0B,4BAAA;YAC1B,QAAQ,UAAA;YACR,UAAU,YAAA;YACV,IAAI,EAAE,aAAK;SACX,CAAC;IACJ,CAAC;IArBD,cAqBC","sourcesContent":["import Symbol from '@dojo/shim/Symbol';\nimport {\n\tConstructor,\n\tDefaultWidgetBaseInterface,\n\tDeferredVirtualProperties,\n\tDNode,\n\tHNode,\n\tRegistryLabel,\n\tVirtualDomProperties,\n\tWidgetBaseInterface,\n\tWNode\n} from './interfaces';\n\n/**\n * The symbol identifier for a WNode type\n */\nexport const WNODE = Symbol('Identifier for a WNode.');\n\n/**\n * The symbol identifier for a HNode type\n */\nexport const HNODE = Symbol('Identifier for a HNode.');\n\n/**\n * Helper function that returns true if the `DNode` is a `WNode` using the `type` property\n */\nexport function isWNode<W extends WidgetBaseInterface = DefaultWidgetBaseInterface>(child: DNode<W>): child is WNode<W> {\n\treturn Boolean(child && (typeof child !== 'string') && child.type === WNODE);\n}\n\n/**\n * Helper function that returns true if the `DNode` is a `HNode` using the `type` property\n */\nexport function isHNode(child: DNode): child is HNode {\n\treturn Boolean(child && (typeof child !== 'string') && child.type === HNODE);\n}\n\n/**\n * Generic decorate function for DNodes. The nodes are modified in place based on the provided predicate\n * and modifier functions.\n *\n * The children of each node are flattened and added to the array for decoration.\n *\n * If no predicate is supplied then the modifier will be executed on all nodes.\n */\nexport function decorate(dNodes: DNode, modifier: (dNode: DNode) => void, predicate?: (dNode: DNode) => boolean): DNode;\nexport function decorate(dNodes: DNode[], modifier: (dNode: DNode) => void, predicate?: (dNode: DNode) => boolean): DNode[];\nexport function decorate(dNodes: DNode | DNode[], modifier: (dNode: DNode) => void, predicate?: (dNode: DNode) => boolean): DNode | DNode[];\nexport function decorate(dNodes: DNode | DNode[], modifier: (dNode: DNode) => void, predicate?: (dNode: DNode) => boolean): DNode | DNode[] {\n\tlet nodes = Array.isArray(dNodes) ? [ ...dNodes ] : [ dNodes ];\n\twhile (nodes.length) {\n\t\tconst node = nodes.pop();\n\t\tif (node) {\n\t\t\tif (!predicate || predicate(node)) {\n\t\t\t\tmodifier(node);\n\t\t\t}\n\t\t\tif ((isWNode(node) || isHNode(node)) && node.children) {\n\t\t\t\tnodes = [ ...nodes, ...node.children ];\n\t\t\t}\n\t\t}\n\t}\n\treturn dNodes;\n}\n\n/**\n * Wrapper function for calls to create a widget.\n */\nexport function w<W extends WidgetBaseInterface>(widgetConstructor: Constructor<W> | RegistryLabel, properties: W['properties'], children: W['children'] = []): WNode<W> {\n\n\treturn {\n\t\tchildren,\n\t\twidgetConstructor,\n\t\tproperties,\n\t\ttype: WNODE\n\t};\n}\n\n/**\n * Wrapper function for calls to create HNodes.\n */\nexport function v(tag: string, properties: VirtualDomProperties | DeferredVirtualProperties, children?: DNode[]): HNode;\nexport function v(tag: string, children: undefined | DNode[]): HNode;\nexport function v(tag: string): HNode;\nexport function v(tag: string, propertiesOrChildren: VirtualDomProperties | DeferredVirtualProperties | DNode[] = {}, children: undefined | DNode[] = undefined): HNode {\n\t\tlet properties: VirtualDomProperties | DeferredVirtualProperties = propertiesOrChildren;\n\t\tlet deferredPropertiesCallback;\n\n\t\tif (Array.isArray(propertiesOrChildren)) {\n\t\t\tchildren = propertiesOrChildren;\n\t\t\tproperties = {};\n\t\t}\n\n\t\tif (typeof properties === 'function') {\n\t\t\tdeferredPropertiesCallback = properties;\n\t\t\tproperties = {};\n\t\t}\n\n\t\treturn {\n\t\t\ttag,\n\t\t\tdeferredPropertiesCallback,\n\t\t\tchildren,\n\t\t\tproperties,\n\t\t\ttype: HNODE\n\t\t};\n}\n"]}