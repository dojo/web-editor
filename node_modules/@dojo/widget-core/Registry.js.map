{"version":3,"file":"Registry.js","sourceRoot":"","sources":["Registry.ts"],"names":[],"mappings":"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","sourcesContent":["import Promise from '@dojo/shim/Promise';\nimport Map from '@dojo/shim/Map';\nimport Symbol from '@dojo/shim/Symbol';\nimport { Handle } from '@dojo/interfaces/core';\nimport { BaseEventedEvents, Evented, EventObject } from '@dojo/core/Evented';\nimport { Constructor, RegistryLabel, WidgetBaseConstructor, WidgetBaseInterface } from './interfaces';\nimport { Injector } from './Injector';\n\nexport type WidgetBaseConstructorFunction = () => Promise<WidgetBaseConstructor>;\n\nexport type RegistryItem = WidgetBaseConstructor | Promise<WidgetBaseConstructor> | WidgetBaseConstructorFunction;\n\n/**\n * Widget base symbol type\n */\nexport const WIDGET_BASE_TYPE = Symbol('Widget Base');\n\nexport interface RegistryEventObject extends EventObject {\n\taction: string;\n\titem: WidgetBaseConstructor | Injector;\n}\n\nexport interface RegistryListener {\n\t(event: RegistryEventObject): void;\n}\n\nexport interface RegistryEvents extends BaseEventedEvents {\n\t(type: RegistryLabel, listener: RegistryListener | RegistryListener[]): Handle;\n}\n\n/**\n * Widget Registry Interface\n */\nexport interface RegistryInterface {\n\n\t/**\n\t * Define a WidgetRegistryItem against a label\n\t *\n\t * @param label The label of the widget to register\n\t * @param registryItem The registry item to define\n\t */\n\tdefine(label: RegistryLabel, registryItem: RegistryItem): void;\n\n\t/**\n\t * Return a RegistryItem for the given label, null if an entry doesn't exist\n\t *\n\t * @param widgetLabel The label of the widget to return\n\t * @returns The RegistryItem for the widgetLabel, `null` if no entry exists\n\t */\n\tget<T extends WidgetBaseInterface = WidgetBaseInterface>(label: RegistryLabel): Constructor<T> | null;\n\n\t/**\n\t * Returns a boolean if an entry for the label exists\n\t *\n\t * @param widgetLabel The label to search for\n\t * @returns boolean indicating if a widget registry item exists\n\t */\n\thas(label: RegistryLabel): boolean;\n\n\t/**\n\t * Define an Injector against a label\n\t *\n\t * @param label The label of the injector to register\n\t * @param registryItem The injector to define\n\t */\n\tdefineInjector(label: RegistryLabel, registryItem: Injector): void;\n\n\t/**\n\t * Return an Injector registry item for the given label, null if an entry doesn't exist\n\t *\n\t * @param label The label of the injector to return\n\t * @returns The RegistryItem for the widgetLabel, `null` if no entry exists\n\t */\n\tgetInjector<T extends Injector>(label: RegistryLabel): T | null;\n\n\t/**\n\t * Returns a boolean if an injector for the label exists\n\t *\n\t * @param widgetLabel The label to search for\n\t * @returns boolean indicating if a injector registry item exists\n\t */\n\thasInjector(label: RegistryLabel): boolean;\n}\n\n/**\n * Checks is the item is a subclass of WidgetBase (or a WidgetBase)\n *\n * @param item the item to check\n * @returns true/false indicating if the item is a WidgetBaseConstructor\n */\nexport function isWidgetBaseConstructor<T extends WidgetBaseInterface>(item: any): item is Constructor<T> {\n\treturn Boolean(item && item._type === WIDGET_BASE_TYPE);\n}\n\n/**\n * The Registry implementation\n */\nexport class Registry extends Evented implements RegistryInterface {\n\n\tpublic on: RegistryEvents;\n\n\t/**\n\t * internal map of labels and RegistryItem\n\t */\n\tprivate _widgetRegistry: Map<RegistryLabel, RegistryItem>;\n\n\tprivate _injectorRegistry: Map<RegistryLabel, Injector>;\n\n\t/**\n\t * Emit loaded event for registry label\n\t */\n\tprivate emitLoadedEvent(widgetLabel: RegistryLabel, item: WidgetBaseConstructorFunction | WidgetBaseConstructor | Injector): void {\n\t\tthis.emit({\n\t\t\ttype: widgetLabel,\n\t\t\taction: 'loaded',\n\t\t\titem\n\t\t});\n\t}\n\n\tpublic define(label: RegistryLabel, item: RegistryItem): void {\n\t\tif (this._widgetRegistry === undefined) {\n\t\t\tthis._widgetRegistry = new Map();\n\t\t}\n\n\t\tif (this._widgetRegistry.has(label)) {\n\t\t\tthrow new Error(`widget has already been registered for '${label.toString()}'`);\n\t\t}\n\n\t\tthis._widgetRegistry.set(label, item);\n\n\t\tif (item instanceof Promise) {\n\t\t\titem.then((widgetCtor) => {\n\t\t\t\tthis._widgetRegistry.set(label, widgetCtor);\n\t\t\t\tthis.emitLoadedEvent(label, widgetCtor);\n\t\t\t\treturn widgetCtor;\n\t\t\t}, (error) => {\n\t\t\t\tthrow error;\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.emitLoadedEvent(label, item);\n\t\t}\n\t}\n\n\tpublic defineInjector(label: RegistryLabel, item: Injector): void {\n\t\tif (this._injectorRegistry === undefined) {\n\t\t\tthis._injectorRegistry = new Map();\n\t\t}\n\n\t\tif (this._injectorRegistry.has(label)) {\n\t\t\tthrow new Error(`injector has already been registered for '${label.toString()}'`);\n\t\t}\n\n\t\tthis._injectorRegistry.set(label, item);\n\t\tthis.emitLoadedEvent(label, item);\n\t}\n\n\tpublic get<T extends WidgetBaseInterface = WidgetBaseInterface>(label: RegistryLabel): Constructor<T> | null {\n\t\tif (!this.has(label)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst item = this._widgetRegistry.get(label);\n\n\t\tif (isWidgetBaseConstructor<T>(item)) {\n\t\t\treturn item;\n\t\t}\n\n\t\tif (item instanceof Promise) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst promise = (<WidgetBaseConstructorFunction> item)();\n\t\tthis._widgetRegistry.set(label, promise);\n\n\t\tpromise.then((widgetCtor) => {\n\t\t\tthis._widgetRegistry.set(label, widgetCtor);\n\t\t\tthis.emitLoadedEvent(label, widgetCtor);\n\t\t\treturn widgetCtor;\n\t\t}, (error) => {\n\t\t\tthrow error;\n\t\t});\n\n\t\treturn null;\n\t}\n\n\tpublic getInjector<T extends Injector>(label: RegistryLabel): T | null {\n\t\tif (!this.hasInjector(label)) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._injectorRegistry.get(label) as T;\n\t}\n\n\tpublic has(label: RegistryLabel): boolean {\n\t\treturn Boolean(this._widgetRegistry && this._widgetRegistry.has(label));\n\t}\n\n\tpublic hasInjector(label: RegistryLabel): boolean {\n\t\treturn Boolean(this._injectorRegistry && this._injectorRegistry.has(label));\n\t}\n}\n\nexport default Registry;\n"]}